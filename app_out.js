tester/src/App.svelte
/* generated by Svelte v3.42.4 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	append_styles,
	assign,
	attr,
	binding_callbacks,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	get_spread_object,
	get_spread_update,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	select_option,
	select_value,
	set_data,
	set_input_value,
	set_style,
	space,
	src_url_equal,
	text,
	to_number,
	transition_in,
	transition_out
} from "svelte/internal";

import BurgerMenu from 'svelte-burger-menu';
import { HsvPicker } from 'svelte-color-picker';
import FloatWindow from 'svelte-float-window';
import { popup_size } from '../utils/display-utils.js';
import Ruler from './ruler.svelte';
import Modal from './modal.svelte';
import { onMount } from 'svelte';
import ManageProject from './dialogs/project-manage.svelte';
import OpenProject from './dialogs/project-open.svelte';
import SaveProject from './dialogs/project-save.svelte';
import ImportSVG from './dialogs/svg-import.svelte';
import ExportSVG from './dialogs/svg-export.svelte';
import SaveSVG from './dialogs/svg-save.svelte';
import DocProps from './dialogs/doc-properties.svelte';
import EditPrefs from './dialogs/editor-preferences.svelte';
import { db_startup, db_store } from '../utils/db-utils';
import CanEdit from './can_edit.svelte';

function add_css(target) {
	append_styles(target, "svelte-1lzmo3j", ".v-spacer.svelte-1lzmo3j{height:52px;width:inherit\n\t}.b-menu-item.svelte-1lzmo3j{vertical-align:top;cursor:pointer}.b-menu-item-text.svelte-1lzmo3j{display:inline-block;vertical-align:top;margin-left:2px;text-align:center}.top-menu-item.svelte-1lzmo3j{width:inherit;cursor:pointer;height:30px;width:30px}.top-text.svelte-1lzmo3j{color:white;font-size:80%;margin-right:2px}.top-input.svelte-1lzmo3j{height:20px;width:50px;font-size:90%}.v-left-menu.svelte-1lzmo3j{width:inherit\n\t}.v-left-menu-item.svelte-1lzmo3j{width:inherit;cursor:pointer;height:30px;width:30px}.v-left-menu-button.svelte-1lzmo3j{margin-top:3px;background-color:rgb(136, 134, 134);text-align:center;vertical-align:middle;border-radius:15%}.bottom-menu-button.svelte-1lzmo3j{background-color:none;cursor:pointer;margin-top:0px;text-align:center;vertical-align:middle;border-radius:15%;width:fit-content;display:inline-block}.bottom-menu-item.svelte-1lzmo3j{height:30px;width:30px}.bottom-input.svelte-1lzmo3j{height:20px;width:60px}.picker-button.svelte-1lzmo3j{visibility:inherit;cursor:pointer;color:darkorchid}.color-box.svelte-1lzmo3j{position:absolute;bottom:90px;left:60px;z-index:2000;border:solid 2px black}.left-panel.svelte-1lzmo3j{position:absolute;top:0px;left:6px;padding:2px;border:solid 1px darkblue;width:38px;height:calc(100% - 44px);background-color:whitesmoke;float:left;text-align:center}.top-panel.svelte-1lzmo3j{position:absolute;--leftness:52px;top:0px;left:var(--leftness);border:solid 1px darkblue;background-color:darkslategray;width:calc(100vw - (var(--leftness) + 4px));height:36px}.bottom-panel.svelte-1lzmo3j{position:absolute;--b-leftness:6px;--b-topness:calc(100% - 36px);top:var(--b-topness);left:var(--b-leftness);border:solid 1px darkblue;background-color:darkslategray;width:calc(100vw - (var(--b-leftness) + 4px));height:36px;vertical-align:top}.canvas-system.svelte-1lzmo3j{position:absolute;--topness:40px;--leftness:52px;--b-topness:calc(100% - 36px);top:var(--topness);left:var(--leftness);border:solid 1px darkblue;width:calc(100vw - (var(--leftness) + 4px));height:calc(var(--b-topness) - var(--topness) - 4px);overflow:auto}.canvas-panel.svelte-1lzmo3j{position:absolute;top:0;left:0;border:solid 1px darkblue;background-color:rgb(179, 179, 179);overflow:hidden}.main-canvas.svelte-1lzmo3j{position:absolute;background-color:white;border:1px solid black}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[147] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[150] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[153] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[156] = list[i];
	return child_ctx;
}

// (673:1) {#if selection_mode }
function create_if_block_37(ctx) {
	let span0;
	let input0;
	let t1;
	let span1;
	let input1;
	let mounted;
	let dispose;

	return {
		c() {
			span0 = element("span");
			span0.textContent = "id:";
			input0 = element("input");
			t1 = space();
			span1 = element("span");
			span1.textContent = "class:";
			input1 = element("input");
			attr(span0, "class", "top-text svelte-1lzmo3j");
			attr(input0, "type", "text");
			attr(input0, "class", "bottom-input svelte-1lzmo3j");
			attr(span1, "class", "top-text svelte-1lzmo3j");
			attr(input1, "type", "text");
			attr(input1, "class", "bottom-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span0, anchor);
			insert(target, input0, anchor);
			set_input_value(input0, /*id_selected*/ ctx[23]);
			insert(target, t1, anchor);
			insert(target, span1, anchor);
			insert(target, input1, anchor);
			set_input_value(input1, /*class_selected*/ ctx[24]);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[79]),
					listen(input1, "input", /*input1_input_handler*/ ctx[80])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*id_selected*/ 8388608 && input0.value !== /*id_selected*/ ctx[23]) {
				set_input_value(input0, /*id_selected*/ ctx[23]);
			}

			if (dirty[0] & /*class_selected*/ 16777216 && input1.value !== /*class_selected*/ ctx[24]) {
				set_input_value(input1, /*class_selected*/ ctx[24]);
			}
		},
		d(detaching) {
			if (detaching) detach(span0);
			if (detaching) detach(input0);
			if (detaching) detach(t1);
			if (detaching) detach(span1);
			if (detaching) detach(input1);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (680:1) {#if selection_mode && selection_mode_var('rotate') }
function create_if_block_36(ctx) {
	let div;
	let t;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/angle.svg" alt="undo" title="undo"/>`;
			t = space();
			input = element("input");
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			insert(target, t, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_rotate*/ ctx[43]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[81]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_rotate*/ 4096 && to_number(input.value) !== /*object_rotate*/ ctx[43]) {
				set_input_value(input, /*object_rotate*/ ctx[43]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (687:1) {#if g_selector && selection_mode_var('x') }
function create_if_block_35(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "x:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_x*/ ctx[27]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_1*/ ctx[82]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*object_x*/ 134217728 && to_number(input.value) !== /*object_x*/ ctx[27]) {
				set_input_value(input, /*object_x*/ ctx[27]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (690:1) {#if g_selector && selection_mode_var('y') }
function create_if_block_34(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "y:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_y*/ ctx[28]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_2*/ ctx[83]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*object_y*/ 268435456 && to_number(input.value) !== /*object_y*/ ctx[28]) {
				set_input_value(input, /*object_y*/ ctx[28]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (694:1) {#if g_selector && selection_mode_var('w') }
function create_if_block_33(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "h:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_width*/ ctx[29]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_3*/ ctx[84]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*object_width*/ 536870912 && to_number(input.value) !== /*object_width*/ ctx[29]) {
				set_input_value(input, /*object_width*/ ctx[29]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (697:1) {#if g_selector && selection_mode_var('h') }
function create_if_block_32(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "w:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_height*/ ctx[30]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_4*/ ctx[85]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*object_height*/ 1073741824 && to_number(input.value) !== /*object_height*/ ctx[30]) {
				set_input_value(input, /*object_height*/ ctx[30]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (702:1) {#if g_selector && selection_mode_var('x1') }
function create_if_block_31(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "x1:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_x1*/ ctx[31]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_5*/ ctx[86]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_x1*/ 1 && to_number(input.value) !== /*object_x1*/ ctx[31]) {
				set_input_value(input, /*object_x1*/ ctx[31]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (705:1) {#if g_selector && selection_mode_var('y1') }
function create_if_block_30(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "y1:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_y1*/ ctx[32]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_6*/ ctx[87]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_y1*/ 2 && to_number(input.value) !== /*object_y1*/ ctx[32]) {
				set_input_value(input, /*object_y1*/ ctx[32]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (708:1) {#if g_selector && selection_mode_var('x2') }
function create_if_block_29(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "x2:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_x2*/ ctx[33]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_7*/ ctx[88]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_x2*/ 4 && to_number(input.value) !== /*object_x2*/ ctx[33]) {
				set_input_value(input, /*object_x2*/ ctx[33]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (711:1) {#if g_selector && selection_mode_var('y2') }
function create_if_block_28(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "y2:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_y2*/ ctx[34]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_8*/ ctx[89]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_y2*/ 8 && to_number(input.value) !== /*object_y2*/ ctx[34]) {
				set_input_value(input, /*object_y2*/ ctx[34]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (716:1) {#if g_selector && selection_mode_var('cx') }
function create_if_block_27(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "cx:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_cx*/ ctx[35]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_9*/ ctx[90]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_cx*/ 16 && to_number(input.value) !== /*object_cx*/ ctx[35]) {
				set_input_value(input, /*object_cx*/ ctx[35]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (719:1) {#if g_selector && selection_mode_var('cy') }
function create_if_block_26(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "cy:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_cy*/ ctx[36]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_10*/ ctx[91]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_cy*/ 32 && to_number(input.value) !== /*object_cy*/ ctx[36]) {
				set_input_value(input, /*object_cy*/ ctx[36]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (722:1) {#if g_selector && selection_mode_var('rx') }
function create_if_block_25(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "rx:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_rx*/ ctx[37]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_11*/ ctx[92]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_rx*/ 64 && to_number(input.value) !== /*object_rx*/ ctx[37]) {
				set_input_value(input, /*object_rx*/ ctx[37]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (725:1) {#if g_selector && selection_mode_var('ry') }
function create_if_block_24(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "ry:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_ry*/ ctx[38]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_12*/ ctx[93]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_ry*/ 128 && to_number(input.value) !== /*object_ry*/ ctx[38]) {
				set_input_value(input, /*object_ry*/ ctx[38]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (729:1) {#if g_selector && selection_mode_var('group') }
function create_if_block_23(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/group_elements.svg" alt="form group" title="form group"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (735:1) {#if g_selector && selection_mode_var('ungroup') }
function create_if_block_22(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/ungroup.svg" alt="ungroup" title="ungroup"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (741:1) {#if g_selector && selection_mode_var('relative') }
function create_if_block_21(ctx) {
	let span;
	let t1;
	let div;
	let select;
	let mounted;
	let dispose;
	let each_value_3 = /*grouping_references*/ ctx[54];
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	return {
		c() {
			span = element("span");
			span.textContent = "font:";
			t1 = space();
			div = element("div");
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "top-text svelte-1lzmo3j");
			set_style(select, "height", "25px");
			set_style(select, "font-size", "70%");
			if (/*grouping_reference*/ ctx[20] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[94].call(select));
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
			set_style(div, "vertical-align", "bottom");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			append(div, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*grouping_reference*/ ctx[20]);

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler*/ ctx[94]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*grouping_references*/ 8388608) {
				each_value_3 = /*grouping_references*/ ctx[54];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}

			if (dirty[0] & /*grouping_reference*/ 1048576 | dirty[1] & /*grouping_references*/ 8388608) {
				select_option(select, /*grouping_reference*/ ctx[20]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (745:4) {#each grouping_references as a_ref}
function create_each_block_3(ctx) {
	let option;
	let t0_value = /*a_ref*/ ctx[156] + "";
	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			option.__value = option_value_value = /*a_ref*/ ctx[156];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (754:1) {#if g_selector && selection_mode_var('corner') }
function create_if_block_20(ctx) {
	let div;
	let t;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/c_radius.svg" alt="undo" title="undo"/>`;
			t = space();
			input = element("input");
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			insert(target, t, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_corner*/ ctx[44]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_13*/ ctx[95]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_corner*/ 8192 && to_number(input.value) !== /*object_corner*/ ctx[44]) {
				set_input_value(input, /*object_corner*/ ctx[44]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (761:1) {#if g_selector && selection_mode_var('bold') }
function create_if_block_19(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/bold.svg" alt="bold" title="bold"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (766:1) {#if g_selector && selection_mode_var('italic') }
function create_if_block_18(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/italic.svg" alt="italic" title="italic"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (771:1) {#if g_selector && selection_mode_var('font') }
function create_if_block_17(ctx) {
	let span;
	let t1;
	let div;
	let select;
	let mounted;
	let dispose;
	let each_value_2 = /*object_text_fonts*/ ctx[57];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			span = element("span");
			span.textContent = "font:";
			t1 = space();
			div = element("div");
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "top-text svelte-1lzmo3j");
			set_style(select, "height", "25px");
			set_style(select, "font-size", "70%");
			if (/*object_text_font*/ ctx[45] === void 0) add_render_callback(() => /*select_change_handler_1*/ ctx[96].call(select));
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
			set_style(div, "vertical-align", "bottom");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			append(div, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*object_text_font*/ ctx[45]);

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler_1*/ ctx[96]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_text_fonts*/ 67108864) {
				each_value_2 = /*object_text_fonts*/ ctx[57];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}

			if (dirty[1] & /*object_text_font, object_text_fonts*/ 67125248) {
				select_option(select, /*object_text_font*/ ctx[45]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (775:4) {#each object_text_fonts as a_font}
function create_each_block_2(ctx) {
	let option;
	let t0_value = /*a_font*/ ctx[153].text + "";
	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			option.__value = option_value_value = /*a_font*/ ctx[153].text;
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (783:1) {#if g_selector && selection_mode_var('align-left') }
function create_if_block_16(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/align_left.svg" alt="align left" title="align left"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (788:1) {#if g_selector && selection_mode_var('align-center') }
function create_if_block_15(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/align_center.svg" alt="align center" title="align center"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (793:1) {#if g_selector && selection_mode_var('align-right') }
function create_if_block_14(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/align_right.svg" alt="align right" title="align right"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (799:1) {#if g_selector && selection_mode_var('align-top') }
function create_if_block_13(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/align_top.svg" alt="align top" title="align top"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (804:1) {#if g_selector && selection_mode_var('align-middle') }
function create_if_block_12(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/align_middle.svg" alt="align middle" title="align middle"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (809:1) {#if g_selector && selection_mode_var('align-bottom') }
function create_if_block_11(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/align_bottom.svg" alt="align bottom" title="align bottom"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (815:1) {#if g_selector && selection_mode_var('curve') }
function create_if_block_10(ctx) {
	let span;
	let t1;
	let div;
	let select;
	let mounted;
	let dispose;
	let each_value_1 = /*path_segment_styles*/ ctx[55];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			span = element("span");
			span.textContent = "font:";
			t1 = space();
			div = element("div");
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "top-text svelte-1lzmo3j");
			set_style(select, "height", "25px");
			set_style(select, "font-size", "70%");
			if (/*path_segment_style*/ ctx[21] === void 0) add_render_callback(() => /*select_change_handler_2*/ ctx[97].call(select));
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
			set_style(div, "vertical-align", "bottom");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			append(div, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*path_segment_style*/ ctx[21]);

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler_2*/ ctx[97]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*path_segment_styles*/ 16777216) {
				each_value_1 = /*path_segment_styles*/ ctx[55];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty[0] & /*path_segment_style*/ 2097152 | dirty[1] & /*path_segment_styles*/ 16777216) {
				select_option(select, /*path_segment_style*/ ctx[21]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (819:4) {#each path_segment_styles as a_seg_style}
function create_each_block_1(ctx) {
	let option;
	let t0_value = /*a_seg_style*/ ctx[150] + "";
	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			option.__value = option_value_value = /*a_seg_style*/ ctx[150];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (827:1) {#if g_selector && selection_mode_var('clone-node') }
function create_if_block_9(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/node_clone.svg" alt="clone node" title="clone node"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (832:1) {#if g_selector && selection_mode_var('delete-node') }
function create_if_block_8(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/node_delete.svg" alt="delete node" title="delete node"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (837:1) {#if g_selector && selection_mode_var('subpath') }
function create_if_block_7(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/path.svg" alt="open/close subpath" title="open/close subpath"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (842:1) {#if g_selector && selection_mode_var('add-subpath') }
function create_if_block_6(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/tool_add_subpath.svg" alt="add subpath" title="add subpath"/>`;
			attr(div, "class", "bottom-menu-button svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (848:1) {#if g_selector && selection_mode_var('points') }
function create_if_block_5(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "points:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_points*/ ctx[39]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_14*/ ctx[98]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_points*/ 256 && to_number(input.value) !== /*object_points*/ ctx[39]) {
				set_input_value(input, /*object_points*/ ctx[39]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (851:1) {#if g_selector && selection_mode_var('sides') }
function create_if_block_4(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "sides:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_sides*/ ctx[40]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_15*/ ctx[99]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_sides*/ 512 && to_number(input.value) !== /*object_sides*/ ctx[40]) {
				set_input_value(input, /*object_sides*/ ctx[40]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (854:1) {#if g_selector && selection_mode_var('pointiness') }
function create_if_block_3(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "pointiness:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_pointiness*/ ctx[41]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_16*/ ctx[100]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_pointiness*/ 1024 && to_number(input.value) !== /*object_pointiness*/ ctx[41]) {
				set_input_value(input, /*object_pointiness*/ ctx[41]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (857:1) {#if g_selector && selection_mode_var('radial-shift') }
function create_if_block_2(ctx) {
	let span;
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "radial shift:";
			input = element("input");
			attr(span, "class", "top-text svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "class", "top-input svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			insert(target, input, anchor);
			set_input_value(input, /*object_radial_shift*/ ctx[42]);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler_17*/ ctx[101]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[1] & /*object_radial_shift*/ 2048 && to_number(input.value) !== /*object_radial_shift*/ ctx[42]) {
				set_input_value(input, /*object_radial_shift*/ ctx[42]);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (869:2) {#each magnifications as mag}
function create_each_block(ctx) {
	let option;
	let t0_value = /*mag*/ ctx[147].text + "";
	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			option.__value = option_value_value = /*mag*/ ctx[147].value;
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (971:1) {#if project_selected }
function create_if_block(ctx) {
	let div;
	let t0;
	let t1_value = /*g_db_store*/ ctx[6].project_name + "";
	let t1;
	let t2;
	let if_block_anchor;
	let if_block = /*g_db_store*/ ctx[6].current_file_entry && /*g_db_store*/ ctx[6].current_file_entry.name && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			t0 = text("Editing project: ");
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(div, "class", "b-menu-item-text svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			insert(target, t2, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*g_db_store*/ 64 && t1_value !== (t1_value = /*g_db_store*/ ctx[6].project_name + "")) set_data(t1, t1_value);

			if (/*g_db_store*/ ctx[6].current_file_entry && /*g_db_store*/ ctx[6].current_file_entry.name) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t2);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (975:2) {#if g_db_store.current_file_entry && g_db_store.current_file_entry.name }
function create_if_block_1(ctx) {
	let div;
	let t0;
	let t1_value = /*g_db_store*/ ctx[6].current_file_entry.name + "";
	let t1;

	return {
		c() {
			div = element("div");
			t0 = text("Editing file: ");
			t1 = text(t1_value);
			attr(div, "class", "b-menu-item-text svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*g_db_store*/ 64 && t1_value !== (t1_value = /*g_db_store*/ ctx[6].current_file_entry.name + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (912:0) <BurgerMenu>
function create_default_slot_11(ctx) {
	let div1;
	let t2;
	let div3;
	let t5;
	let div5;
	let t8;
	let hr0;
	let t9;
	let div7;
	let t12;
	let div9;
	let t15;
	let div11;
	let t18;
	let hr1;
	let t19;
	let div13;
	let t22;
	let hr2;
	let t23;
	let div15;
	let t26;
	let div17;
	let t29;
	let hr3;
	let t30;
	let div19;
	let t33;
	let div21;
	let img10;
	let img10_src_value;
	let t34;
	let div20;
	let t37;
	let div23;
	let img11;
	let img11_src_value;
	let t38;
	let div22;
	let t41;
	let hr4;
	let t42;
	let div25;
	let t45;
	let hr5;
	let t46;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*project_selected*/ ctx[5] && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");

			div1.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/new.svg" alt="new" title="new"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Manage Projects</div>`;

			t2 = space();
			div3 = element("div");

			div3.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/save.svg" alt="save" title="save"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Save Project</div>`;

			t5 = space();
			div5 = element("div");

			div5.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/open.svg" alt="open" title="open"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Load Project</div>`;

			t8 = space();
			hr0 = element("hr");
			t9 = space();
			div7 = element("div");

			div7.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/importImg.svg" alt="import" title="import"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Import SVG</div>`;

			t12 = space();
			div9 = element("div");

			div9.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/export.svg" alt="export" title="export"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Export SVG</div>`;

			t15 = space();
			div11 = element("div");

			div11.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/save.svg" alt="save" title="save"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Save SVG</div>`;

			t18 = space();
			hr1 = element("hr");
			t19 = space();
			div13 = element("div");

			div13.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/library.svg" alt="Image Lib" title="Image Library"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Image Library</div>`;

			t22 = space();
			hr2 = element("hr");
			t23 = space();
			div15 = element("div");

			div15.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/docprop.svg" alt="document properties" title="document properties"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Document Properties</div>`;

			t26 = space();
			div17 = element("div");

			div17.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/editPref.svg" alt="editor preferences" title="editor preferences"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Editor Preferences</div>`;

			t29 = space();
			hr3 = element("hr");
			t30 = space();
			div19 = element("div");

			div19.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/source.svg" alt="edit SVG" title="edit SVG"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Edit SVG</div>`;

			t33 = space();
			div21 = element("div");
			img10 = element("img");
			t34 = space();
			div20 = element("div");
			div20.textContent = `${show_hide_grid} Grid`;
			t37 = space();
			div23 = element("div");
			img11 = element("img");
			t38 = space();
			div22 = element("div");
			div22.textContent = `${show_hide_wireframe} Wire Frame`;
			t41 = space();
			hr4 = element("hr");
			t42 = space();
			div25 = element("div");

			div25.innerHTML = `<img class="top-menu-item svelte-1lzmo3j" src="./images/wireframe.svg" alt="Layers" title="Layers"/> 
		<div class="b-menu-item-text svelte-1lzmo3j">Manage Layers</div>`;

			t45 = space();
			hr5 = element("hr");
			t46 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(div1, "class", "b-menu-item svelte-1lzmo3j");
			attr(div3, "class", "b-menu-item svelte-1lzmo3j");
			attr(div5, "class", "b-menu-item svelte-1lzmo3j");
			attr(div7, "class", "b-menu-item svelte-1lzmo3j");
			attr(div9, "class", "b-menu-item svelte-1lzmo3j");
			attr(div11, "class", "b-menu-item svelte-1lzmo3j");
			attr(div13, "class", "b-menu-item svelte-1lzmo3j");
			attr(div15, "class", "b-menu-item svelte-1lzmo3j");
			attr(div17, "class", "b-menu-item svelte-1lzmo3j");
			attr(div19, "class", "b-menu-item svelte-1lzmo3j");
			attr(img10, "class", "top-menu-item svelte-1lzmo3j");
			if (!src_url_equal(img10.src, img10_src_value = "./images/grid.svg")) attr(img10, "src", img10_src_value);
			attr(img10, "alt", "Editor Grid");
			attr(img10, "title", "Editor Grid");
			attr(div20, "class", "b-menu-item-text svelte-1lzmo3j");
			attr(div21, "class", "b-menu-item svelte-1lzmo3j");
			attr(img11, "class", "top-menu-item svelte-1lzmo3j");
			if (!src_url_equal(img11.src, img11_src_value = "./images/wireframe.svg")) attr(img11, "src", img11_src_value);
			attr(img11, "alt", "Wire Frame");
			attr(img11, "title", "Wire Frame");
			attr(div22, "class", "b-menu-item-text svelte-1lzmo3j");
			attr(div23, "class", "b-menu-item svelte-1lzmo3j");
			attr(div25, "class", "b-menu-item svelte-1lzmo3j");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			insert(target, t2, anchor);
			insert(target, div3, anchor);
			insert(target, t5, anchor);
			insert(target, div5, anchor);
			insert(target, t8, anchor);
			insert(target, hr0, anchor);
			insert(target, t9, anchor);
			insert(target, div7, anchor);
			insert(target, t12, anchor);
			insert(target, div9, anchor);
			insert(target, t15, anchor);
			insert(target, div11, anchor);
			insert(target, t18, anchor);
			insert(target, hr1, anchor);
			insert(target, t19, anchor);
			insert(target, div13, anchor);
			insert(target, t22, anchor);
			insert(target, hr2, anchor);
			insert(target, t23, anchor);
			insert(target, div15, anchor);
			insert(target, t26, anchor);
			insert(target, div17, anchor);
			insert(target, t29, anchor);
			insert(target, hr3, anchor);
			insert(target, t30, anchor);
			insert(target, div19, anchor);
			insert(target, t33, anchor);
			insert(target, div21, anchor);
			append(div21, img10);
			append(div21, t34);
			append(div21, div20);
			insert(target, t37, anchor);
			insert(target, div23, anchor);
			append(div23, img11);
			append(div23, t38);
			append(div23, div22);
			insert(target, t41, anchor);
			insert(target, hr4, anchor);
			insert(target, t42, anchor);
			insert(target, div25, anchor);
			insert(target, t45, anchor);
			insert(target, hr5, anchor);
			insert(target, t46, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler_13*/ ctx[109]),
					listen(div3, "click", /*click_handler_14*/ ctx[110]),
					listen(div5, "click", /*click_handler_15*/ ctx[111]),
					listen(div7, "click", /*click_handler_16*/ ctx[112]),
					listen(div9, "click", /*click_handler_17*/ ctx[113]),
					listen(div11, "click", /*click_handler_18*/ ctx[114]),
					listen(div13, "click", /*click_handler_19*/ ctx[115]),
					listen(div15, "click", /*click_handler_20*/ ctx[116]),
					listen(div17, "click", /*click_handler_21*/ ctx[117]),
					listen(div19, "click", /*click_handler_22*/ ctx[118]),
					listen(div21, "click", /*toggle_grid*/ ctx[64]),
					listen(div23, "click", toggle_wireframe),
					listen(div25, "click", /*click_handler_23*/ ctx[119])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*project_selected*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching) detach(t2);
			if (detaching) detach(div3);
			if (detaching) detach(t5);
			if (detaching) detach(div5);
			if (detaching) detach(t8);
			if (detaching) detach(hr0);
			if (detaching) detach(t9);
			if (detaching) detach(div7);
			if (detaching) detach(t12);
			if (detaching) detach(div9);
			if (detaching) detach(t15);
			if (detaching) detach(div11);
			if (detaching) detach(t18);
			if (detaching) detach(hr1);
			if (detaching) detach(t19);
			if (detaching) detach(div13);
			if (detaching) detach(t22);
			if (detaching) detach(hr2);
			if (detaching) detach(t23);
			if (detaching) detach(div15);
			if (detaching) detach(t26);
			if (detaching) detach(div17);
			if (detaching) detach(t29);
			if (detaching) detach(hr3);
			if (detaching) detach(t30);
			if (detaching) detach(div19);
			if (detaching) detach(t33);
			if (detaching) detach(div21);
			if (detaching) detach(t37);
			if (detaching) detach(div23);
			if (detaching) detach(t41);
			if (detaching) detach(hr4);
			if (detaching) detach(t42);
			if (detaching) detach(div25);
			if (detaching) detach(t45);
			if (detaching) detach(hr5);
			if (detaching) detach(t46);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (988:0) <Modal visible={g_visibile_items.project_manage} on:message={handle_modal_close} positive_prompt={"Select"} >
function create_default_slot_10(ctx) {
	let manageproject;
	let current;

	manageproject = new ManageProject({
			props: {
				ui_target: /*g_visibile_items*/ ctx[50].project_manage
			}
		});

	return {
		c() {
			create_component(manageproject.$$.fragment);
		},
		m(target, anchor) {
			mount_component(manageproject, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const manageproject_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) manageproject_changes.ui_target = /*g_visibile_items*/ ctx[50].project_manage;
			manageproject.$set(manageproject_changes);
		},
		i(local) {
			if (current) return;
			transition_in(manageproject.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(manageproject.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(manageproject, detaching);
		}
	};
}

// (992:0) <Modal visible={g_visibile_items.project_open} on:message={handle_modal_close}  positive_prompt={"Store"} >
function create_default_slot_9(ctx) {
	let openproject;
	let current;

	openproject = new OpenProject({
			props: {
				ui_target: /*g_visibile_items*/ ctx[50].project_open
			}
		});

	return {
		c() {
			create_component(openproject.$$.fragment);
		},
		m(target, anchor) {
			mount_component(openproject, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const openproject_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) openproject_changes.ui_target = /*g_visibile_items*/ ctx[50].project_open;
			openproject.$set(openproject_changes);
		},
		i(local) {
			if (current) return;
			transition_in(openproject.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(openproject.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(openproject, detaching);
		}
	};
}

// (996:0) <Modal visible={g_visibile_items.project_save} on:message={handle_modal_close}  positive_prompt={"Save"} >
function create_default_slot_8(ctx) {
	let saveproject;
	let current;

	saveproject = new SaveProject({
			props: {
				ui_target: /*g_visibile_items*/ ctx[50].project_save
			}
		});

	return {
		c() {
			create_component(saveproject.$$.fragment);
		},
		m(target, anchor) {
			mount_component(saveproject, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const saveproject_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) saveproject_changes.ui_target = /*g_visibile_items*/ ctx[50].project_save;
			saveproject.$set(saveproject_changes);
		},
		i(local) {
			if (current) return;
			transition_in(saveproject.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(saveproject.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(saveproject, detaching);
		}
	};
}

// (1001:0) <Modal visible={g_visibile_items.svg_import} on:message={handle_modal_close} >
function create_default_slot_7(ctx) {
	let importsvg;
	let current;

	importsvg = new ImportSVG({
			props: {
				ui_target: /*g_visibile_items*/ ctx[50].svg_import
			}
		});

	return {
		c() {
			create_component(importsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(importsvg, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const importsvg_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) importsvg_changes.ui_target = /*g_visibile_items*/ ctx[50].svg_import;
			importsvg.$set(importsvg_changes);
		},
		i(local) {
			if (current) return;
			transition_in(importsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(importsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(importsvg, detaching);
		}
	};
}

// (1005:0) <Modal visible={g_visibile_items.svg_export} on:message={handle_modal_close} >
function create_default_slot_6(ctx) {
	let exportsvg;
	let current;

	exportsvg = new ExportSVG({
			props: {
				ui_target: /*g_visibile_items*/ ctx[50].svg_export,
				export_file: /*g_exportable*/ ctx[7]
			}
		});

	return {
		c() {
			create_component(exportsvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(exportsvg, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const exportsvg_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) exportsvg_changes.ui_target = /*g_visibile_items*/ ctx[50].svg_export;
			if (dirty[0] & /*g_exportable*/ 128) exportsvg_changes.export_file = /*g_exportable*/ ctx[7];
			exportsvg.$set(exportsvg_changes);
		},
		i(local) {
			if (current) return;
			transition_in(exportsvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(exportsvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(exportsvg, detaching);
		}
	};
}

// (1009:0) <Modal visible={g_visibile_items.svg_save} on:message={handle_modal_close} >
function create_default_slot_5(ctx) {
	let savesvg;
	let current;

	savesvg = new SaveSVG({
			props: {
				ui_target: /*g_visibile_items*/ ctx[50].svg_save,
				save_file: /*g_exportable*/ ctx[7]
			}
		});

	return {
		c() {
			create_component(savesvg.$$.fragment);
		},
		m(target, anchor) {
			mount_component(savesvg, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const savesvg_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) savesvg_changes.ui_target = /*g_visibile_items*/ ctx[50].svg_save;
			if (dirty[0] & /*g_exportable*/ 128) savesvg_changes.save_file = /*g_exportable*/ ctx[7];
			savesvg.$set(savesvg_changes);
		},
		i(local) {
			if (current) return;
			transition_in(savesvg.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(savesvg.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(savesvg, detaching);
		}
	};
}

// (1013:0) <Modal visible={g_visibile_items.doc_properties} on:message={handle_modal_close} >
function create_default_slot_4(ctx) {
	let docprops;
	let current;

	docprops = new DocProps({
			props: {
				ui_target: /*g_visibile_items*/ ctx[50].doc_properties
			}
		});

	return {
		c() {
			create_component(docprops.$$.fragment);
		},
		m(target, anchor) {
			mount_component(docprops, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const docprops_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) docprops_changes.ui_target = /*g_visibile_items*/ ctx[50].doc_properties;
			docprops.$set(docprops_changes);
		},
		i(local) {
			if (current) return;
			transition_in(docprops.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(docprops.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(docprops, detaching);
		}
	};
}

// (1017:0) <Modal visible={g_visibile_items.editor_prefs} on:message={handle_modal_close} >
function create_default_slot_3(ctx) {
	let editprefs;
	let current;

	editprefs = new EditPrefs({
			props: {
				ui_target: /*g_visibile_items*/ ctx[50].editor_prefs
			}
		});

	return {
		c() {
			create_component(editprefs.$$.fragment);
		},
		m(target, anchor) {
			mount_component(editprefs, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const editprefs_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) editprefs_changes.ui_target = /*g_visibile_items*/ ctx[50].editor_prefs;
			editprefs.$set(editprefs_changes);
		},
		i(local) {
			if (current) return;
			transition_in(editprefs.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(editprefs.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(editprefs, detaching);
		}
	};
}

// (1023:0) <FloatWindow title="Image Library"  index={0} scale_size_array={all_window_scales[0]} >
function create_default_slot_2(ctx) {
	let t;

	return {
		c() {
			t = text("Image Library");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (1028:0) <FloatWindow title="SVG Editor"  index={1} scale_size_array={all_window_scales[1]} >
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("SVG Editor");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (1033:0) <FloatWindow title="Manage Layers"  index={2} scale_size_array={all_window_scales[2]} >
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text("Manage Layers");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div13;
	let div0;
	let t0;
	let div12;
	let div1;
	let t1;
	let div2;
	let t2;
	let div3;
	let t3;
	let div4;
	let t4;
	let div5;
	let t5;
	let div6;
	let t6;
	let div7;
	let t7;
	let div8;
	let t8;
	let div9;
	let t9;
	let div10;
	let t10;
	let div11;
	let t11;
	let div21;
	let div14;
	let t12;
	let div15;
	let t13;
	let span0;
	let t15;
	let div16;
	let t16;
	let div17;
	let t17;
	let span1;
	let t19;
	let div18;
	let t20;
	let div19;
	let t21;
	let div20;
	let t22;
	let span2;
	let t24;
	let t25;
	let span3;
	let t27;
	let show_if_34 = /*selection_mode*/ ctx[18] && /*selection_mode_var*/ ctx[58]('rotate');
	let t28;
	let show_if_33 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('x');
	let t29;
	let show_if_32 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('y');
	let t30;
	let show_if_31 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('w');
	let t31;
	let show_if_30 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('h');
	let t32;
	let show_if_29 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('x1');
	let t33;
	let show_if_28 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('y1');
	let t34;
	let show_if_27 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('x2');
	let t35;
	let show_if_26 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('y2');
	let t36;
	let show_if_25 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('cx');
	let t37;
	let show_if_24 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('cy');
	let t38;
	let show_if_23 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('rx');
	let t39;
	let show_if_22 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('ry');
	let t40;
	let show_if_21 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('group');
	let t41;
	let show_if_20 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('ungroup');
	let t42;
	let show_if_19 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('relative');
	let t43;
	let show_if_18 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('corner');
	let t44;
	let show_if_17 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('bold');
	let t45;
	let show_if_16 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('italic');
	let t46;
	let show_if_15 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('font');
	let t47;
	let show_if_14 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-left');
	let t48;
	let show_if_13 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-center');
	let t49;
	let show_if_12 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-right');
	let t50;
	let show_if_11 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-top');
	let t51;
	let show_if_10 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-middle');
	let t52;
	let show_if_9 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-bottom');
	let t53;
	let show_if_8 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('curve');
	let t54;
	let show_if_7 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('clone-node');
	let t55;
	let show_if_6 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('delete-node');
	let t56;
	let show_if_5 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('subpath');
	let t57;
	let show_if_4 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('add-subpath');
	let t58;
	let show_if_3 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('points');
	let t59;
	let show_if_2 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('sides');
	let t60;
	let show_if_1 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('pointiness');
	let t61;
	let show_if = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('radial-shift');
	let t62;
	let div28;
	let div22;
	let t63;
	let select;
	let t64;
	let div23;
	let t65;
	let button0;
	let t66;
	let t67;
	let div24;
	let t68;
	let button1;
	let t69;
	let t70;
	let div25;
	let t71;
	let span4;
	let t75;
	let span5;
	let t79;
	let div26;
	let t80;
	let div27;
	let t81;
	let input;
	let t82;
	let div30;
	let div29;
	let canvas;
	let t83;
	let canedit;
	let t84;
	let ruler0;
	let t85;
	let ruler1;
	let t86;
	let burgermenu;
	let t87;
	let div31;
	let hsvpicker;
	let t88;
	let modal0;
	let t89;
	let modal1;
	let t90;
	let modal2;
	let t91;
	let modal3;
	let t92;
	let modal4;
	let t93;
	let modal5;
	let t94;
	let modal6;
	let t95;
	let modal7;
	let t96;
	let floatwindow0;
	let t97;
	let floatwindow1;
	let t98;
	let floatwindow2;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*selection_mode*/ ctx[18] && create_if_block_37(ctx);
	let if_block1 = show_if_34 && create_if_block_36(ctx);
	let if_block2 = show_if_33 && create_if_block_35(ctx);
	let if_block3 = show_if_32 && create_if_block_34(ctx);
	let if_block4 = show_if_31 && create_if_block_33(ctx);
	let if_block5 = show_if_30 && create_if_block_32(ctx);
	let if_block6 = show_if_29 && create_if_block_31(ctx);
	let if_block7 = show_if_28 && create_if_block_30(ctx);
	let if_block8 = show_if_27 && create_if_block_29(ctx);
	let if_block9 = show_if_26 && create_if_block_28(ctx);
	let if_block10 = show_if_25 && create_if_block_27(ctx);
	let if_block11 = show_if_24 && create_if_block_26(ctx);
	let if_block12 = show_if_23 && create_if_block_25(ctx);
	let if_block13 = show_if_22 && create_if_block_24(ctx);
	let if_block14 = show_if_21 && create_if_block_23(ctx);
	let if_block15 = show_if_20 && create_if_block_22(ctx);
	let if_block16 = show_if_19 && create_if_block_21(ctx);
	let if_block17 = show_if_18 && create_if_block_20(ctx);
	let if_block18 = show_if_17 && create_if_block_19(ctx);
	let if_block19 = show_if_16 && create_if_block_18(ctx);
	let if_block20 = show_if_15 && create_if_block_17(ctx);
	let if_block21 = show_if_14 && create_if_block_16(ctx);
	let if_block22 = show_if_13 && create_if_block_15(ctx);
	let if_block23 = show_if_12 && create_if_block_14(ctx);
	let if_block24 = show_if_11 && create_if_block_13(ctx);
	let if_block25 = show_if_10 && create_if_block_12(ctx);
	let if_block26 = show_if_9 && create_if_block_11(ctx);
	let if_block27 = show_if_8 && create_if_block_10(ctx);
	let if_block28 = show_if_7 && create_if_block_9(ctx);
	let if_block29 = show_if_6 && create_if_block_8(ctx);
	let if_block30 = show_if_5 && create_if_block_7(ctx);
	let if_block31 = show_if_4 && create_if_block_6(ctx);
	let if_block32 = show_if_3 && create_if_block_5(ctx);
	let if_block33 = show_if_2 && create_if_block_4(ctx);
	let if_block34 = show_if_1 && create_if_block_3(ctx);
	let if_block35 = show_if && create_if_block_2(ctx);
	let each_value = /*magnifications*/ ctx[52];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const canedit_spread_levels = [/*edit_props*/ ctx[17]];
	let canedit_props = {};

	for (let i = 0; i < canedit_spread_levels.length; i += 1) {
		canedit_props = assign(canedit_props, canedit_spread_levels[i]);
	}

	canedit = new CanEdit({ props: canedit_props });

	ruler0 = new Ruler({
			props: {
				disposition: "horizontal",
				ruler_top: /*ruler_top*/ ctx[49],
				ruler_magnification: /*ruler_magnification*/ ctx[14],
				zero_tick: /*h_zero_tick*/ ctx[15],
				ruler_interval: INTERVAL_ruler
			}
		});

	ruler1 = new Ruler({
			props: {
				disposition: "vertical",
				ruler_left: /*ruler_left*/ ctx[48],
				ruler_magnification: /*ruler_magnification*/ ctx[14],
				zero_tick: /*v_zero_tick*/ ctx[16],
				ruler_interval: INTERVAL_ruler
			}
		});

	burgermenu = new BurgerMenu({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			}
		});

	hsvpicker = new HsvPicker({ props: { startColor: "#FBFBFB" } });
	hsvpicker.$on("colorChange", colorCallback);

	modal0 = new Modal({
			props: {
				visible: /*g_visibile_items*/ ctx[50].project_manage,
				positive_prompt: "Select",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			}
		});

	modal0.$on("message", /*handle_modal_close*/ ctx[62]);

	modal1 = new Modal({
			props: {
				visible: /*g_visibile_items*/ ctx[50].project_open,
				positive_prompt: "Store",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	modal1.$on("message", /*handle_modal_close*/ ctx[62]);

	modal2 = new Modal({
			props: {
				visible: /*g_visibile_items*/ ctx[50].project_save,
				positive_prompt: "Save",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	modal2.$on("message", /*handle_modal_close*/ ctx[62]);

	modal3 = new Modal({
			props: {
				visible: /*g_visibile_items*/ ctx[50].svg_import,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	modal3.$on("message", /*handle_modal_close*/ ctx[62]);

	modal4 = new Modal({
			props: {
				visible: /*g_visibile_items*/ ctx[50].svg_export,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	modal4.$on("message", /*handle_modal_close*/ ctx[62]);

	modal5 = new Modal({
			props: {
				visible: /*g_visibile_items*/ ctx[50].svg_save,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	modal5.$on("message", /*handle_modal_close*/ ctx[62]);

	modal6 = new Modal({
			props: {
				visible: /*g_visibile_items*/ ctx[50].doc_properties,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	modal6.$on("message", /*handle_modal_close*/ ctx[62]);

	modal7 = new Modal({
			props: {
				visible: /*g_visibile_items*/ ctx[50].editor_prefs,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	modal7.$on("message", /*handle_modal_close*/ ctx[62]);

	floatwindow0 = new FloatWindow({
			props: {
				title: "Image Library",
				index: 0,
				scale_size_array: /*all_window_scales*/ ctx[51][0],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	floatwindow1 = new FloatWindow({
			props: {
				title: "SVG Editor",
				index: 1,
				scale_size_array: /*all_window_scales*/ ctx[51][1],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	floatwindow2 = new FloatWindow({
			props: {
				title: "Manage Layers",
				index: 2,
				scale_size_array: /*all_window_scales*/ ctx[51][2],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div13 = element("div");
			div0 = element("div");
			t0 = space();
			div12 = element("div");
			div1 = element("div");
			div1.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/select.svg" alt="select" title="select"/>`;
			t1 = space();
			div2 = element("div");
			div2.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/pencil.svg" alt="pencil" title="pencil"/>`;
			t2 = space();
			div3 = element("div");
			div3.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/pen.svg" alt="pen" title="pen"/>`;
			t3 = space();
			div4 = element("div");
			div4.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/path.svg" alt="path" title="path"/>`;
			t4 = space();
			div5 = element("div");
			div5.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/rect.svg" alt="rect" title="rect"/>`;
			t5 = space();
			div6 = element("div");
			div6.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/ellipse.svg" alt="ellipse" title="ellipse"/>`;
			t6 = space();
			div7 = element("div");
			div7.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/polygon.svg" alt="polygon" title="polygon"/>`;
			t7 = space();
			div8 = element("div");
			div8.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/star.svg" alt="star" title="postarlygon"/>`;
			t8 = space();
			div9 = element("div");
			div9.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/text.svg" alt="text" title="text"/>`;
			t9 = space();
			div10 = element("div");
			div10.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/image.svg" alt="load" title="load"/>`;
			t10 = space();
			div11 = element("div");
			div11.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/conn.svg" alt="connector" title="connector"/>`;
			t11 = space();
			div21 = element("div");
			div14 = element("div");
			div14.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/undo.svg" alt="undo" title="undo"/>`;
			t12 = space();
			div15 = element("div");
			div15.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/redo.svg" alt="redo" title="redo"/>`;
			t13 = space();
			span0 = element("span");
			span0.textContent = "|";
			t15 = space();
			div16 = element("div");
			div16.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/clone.svg" alt="clone" title="clone"/>`;
			t16 = space();
			div17 = element("div");
			div17.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/delete.svg" alt="delete" title="delete"/>`;
			t17 = space();
			span1 = element("span");
			span1.textContent = "|";
			t19 = space();
			div18 = element("div");
			div18.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/move_top.svg" alt="move front" title="move to front"/>`;
			t20 = space();
			div19 = element("div");
			div19.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/move_bottom.svg" alt="move back" title="move to back"/>`;
			t21 = space();
			div20 = element("div");
			div20.innerHTML = `<img class="v-left-menu-item svelte-1lzmo3j" src="./images/globe_link.svg" alt="add link" title="globe_link"/>`;
			t22 = space();
			span2 = element("span");
			span2.textContent = "|";
			t24 = space();
			if (if_block0) if_block0.c();
			t25 = space();
			span3 = element("span");
			span3.textContent = "|";
			t27 = space();
			if (if_block1) if_block1.c();
			t28 = space();
			if (if_block2) if_block2.c();
			t29 = space();
			if (if_block3) if_block3.c();
			t30 = space();
			if (if_block4) if_block4.c();
			t31 = space();
			if (if_block5) if_block5.c();
			t32 = space();
			if (if_block6) if_block6.c();
			t33 = space();
			if (if_block7) if_block7.c();
			t34 = space();
			if (if_block8) if_block8.c();
			t35 = space();
			if (if_block9) if_block9.c();
			t36 = space();
			if (if_block10) if_block10.c();
			t37 = space();
			if (if_block11) if_block11.c();
			t38 = space();
			if (if_block12) if_block12.c();
			t39 = space();
			if (if_block13) if_block13.c();
			t40 = space();
			if (if_block14) if_block14.c();
			t41 = space();
			if (if_block15) if_block15.c();
			t42 = space();
			if (if_block16) if_block16.c();
			t43 = space();
			if (if_block17) if_block17.c();
			t44 = space();
			if (if_block18) if_block18.c();
			t45 = space();
			if (if_block19) if_block19.c();
			t46 = space();
			if (if_block20) if_block20.c();
			t47 = space();
			if (if_block21) if_block21.c();
			t48 = space();
			if (if_block22) if_block22.c();
			t49 = space();
			if (if_block23) if_block23.c();
			t50 = space();
			if (if_block24) if_block24.c();
			t51 = space();
			if (if_block25) if_block25.c();
			t52 = space();
			if (if_block26) if_block26.c();
			t53 = space();
			if (if_block27) if_block27.c();
			t54 = space();
			if (if_block28) if_block28.c();
			t55 = space();
			if (if_block29) if_block29.c();
			t56 = space();
			if (if_block30) if_block30.c();
			t57 = space();
			if (if_block31) if_block31.c();
			t58 = space();
			if (if_block32) if_block32.c();
			t59 = space();
			if (if_block33) if_block33.c();
			t60 = space();
			if (if_block34) if_block34.c();
			t61 = space();
			if (if_block35) if_block35.c();
			t62 = space();
			div28 = element("div");
			div22 = element("div");
			div22.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/zoom.svg" alt="select" title="zoom"/>`;
			t63 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t64 = space();
			div23 = element("div");
			div23.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/fill.svg" alt="fill" title="fill"/>`;
			t65 = space();
			button0 = element("button");
			t66 = text("fill");
			t67 = space();
			div24 = element("div");
			div24.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/stroke.svg" alt="stroke" title="stroke"/>`;
			t68 = space();
			button1 = element("button");
			t69 = text("stroke");
			t70 = space();
			div25 = element("div");
			div25.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/opacity.svg" alt="opacity" title="opacity"/>`;
			t71 = space();
			span4 = element("span");
			span4.textContent = `fill ${alpha_value_fill}%`;
			t75 = space();
			span5 = element("span");
			span5.textContent = `line ${alpha_value_line}%`;
			t79 = space();
			div26 = element("div");
			div26.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/eye_dropper.svg" alt="eye dropper" title="eye dropper"/>`;
			t80 = space();
			div27 = element("div");
			div27.innerHTML = `<img class="bottom-menu-item svelte-1lzmo3j" src="./images/blur.svg" alt="gaussian blur" title="gaussian blur"/>`;
			t81 = space();
			input = element("input");
			t82 = space();
			div30 = element("div");
			div29 = element("div");
			canvas = element("canvas");
			t83 = space();
			create_component(canedit.$$.fragment);
			t84 = space();
			create_component(ruler0.$$.fragment);
			t85 = space();
			create_component(ruler1.$$.fragment);
			t86 = space();
			create_component(burgermenu.$$.fragment);
			t87 = space();
			div31 = element("div");
			create_component(hsvpicker.$$.fragment);
			t88 = space();
			create_component(modal0.$$.fragment);
			t89 = space();
			create_component(modal1.$$.fragment);
			t90 = space();
			create_component(modal2.$$.fragment);
			t91 = space();
			create_component(modal3.$$.fragment);
			t92 = space();
			create_component(modal4.$$.fragment);
			t93 = space();
			create_component(modal5.$$.fragment);
			t94 = space();
			create_component(modal6.$$.fragment);
			t95 = space();
			create_component(modal7.$$.fragment);
			t96 = space();
			create_component(floatwindow0.$$.fragment);
			t97 = space();
			create_component(floatwindow1.$$.fragment);
			t98 = space();
			create_component(floatwindow2.$$.fragment);
			attr(div0, "class", "v-spacer svelte-1lzmo3j");
			attr(div1, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div2, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div3, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div4, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div5, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div6, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div7, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div8, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div9, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div10, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div11, "class", "v-left-menu-button svelte-1lzmo3j");
			attr(div12, "class", "v-left-menu svelte-1lzmo3j");
			attr(div13, "class", "left-panel svelte-1lzmo3j");
			attr(div14, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(div15, "class", "bottom-menu-button svelte-1lzmo3j");
			set_style(span0, "color", "white");
			attr(div16, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(div17, "class", "bottom-menu-button svelte-1lzmo3j");
			set_style(span1, "color", "white");
			attr(div18, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(div19, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(div20, "class", "bottom-menu-button svelte-1lzmo3j");
			set_style(span2, "color", "white");
			set_style(span3, "color", "white");
			attr(div21, "class", "top-panel svelte-1lzmo3j");
			attr(div22, "class", "bottom-menu-button svelte-1lzmo3j");
			set_style(select, "font-size", "80%");
			if (/*magnification*/ ctx[13] === void 0) add_render_callback(() => /*select_change_handler_3*/ ctx[103].call(select));
			attr(div23, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(button0, "id", "color-fill");
			attr(button0, "class", "picker-button svelte-1lzmo3j");
			set_style(button0, "background-color", fill_color);
			set_style(button0, "color", fill_color_inverted);
			attr(div24, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(button1, "id", "color-line");
			attr(button1, "class", "picker-button svelte-1lzmo3j");
			set_style(button1, "background-color", stroke_color);
			set_style(button1, "color", stroke_color_inverted);
			attr(div25, "class", "bottom-menu-button svelte-1lzmo3j");
			set_style(span4, "color", "greenyellow");
			set_style(span5, "color", "greenyellow");
			attr(div26, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(div27, "class", "bottom-menu-button svelte-1lzmo3j");
			attr(input, "class", "bottom-input svelte-1lzmo3j");
			attr(input, "type", "number");
			attr(input, "min", "0");
			attr(input, "max", "100");
			attr(div28, "class", "bottom-panel svelte-1lzmo3j");
			attr(canvas, "class", "main-canvas svelte-1lzmo3j");
			attr(canvas, "width", /*g_calc_doc_width*/ ctx[2]);
			attr(canvas, "height", /*g_calc_doc_height*/ ctx[3]);
			set_style(canvas, "width", /*g_calc_doc_width*/ ctx[2] + "px");
			set_style(canvas, "height", /*g_calc_doc_height*/ ctx[3] + "px");
			set_style(canvas, "left", /*g_doc_left*/ ctx[0] + "px");
			set_style(canvas, "top", /*g_doc_top*/ ctx[1] + "px");
			attr(div29, "class", "canvas-panel svelte-1lzmo3j");
			set_style(div29, "width", /*g_calc_container_width*/ ctx[11] + "px");
			set_style(div29, "height", /*g_calc_container_height*/ ctx[12] + "px");
			set_style(div29, "cursor", /*tool_cursor*/ ctx[19]);
			attr(div30, "class", "canvas-system svelte-1lzmo3j");
			attr(div31, "class", "color-box svelte-1lzmo3j");
			set_style(div31, "visibility", /*is_viz*/ ctx[47]);
			set_style(div31, "top", /*colorizer_top*/ ctx[25]);
			set_style(div31, "left", /*colorizer_left*/ ctx[26]);
		},
		m(target, anchor) {
			insert(target, div13, anchor);
			append(div13, div0);
			append(div13, t0);
			append(div13, div12);
			append(div12, div1);
			append(div12, t1);
			append(div12, div2);
			append(div12, t2);
			append(div12, div3);
			append(div12, t3);
			append(div12, div4);
			append(div12, t4);
			append(div12, div5);
			append(div12, t5);
			append(div12, div6);
			append(div12, t6);
			append(div12, div7);
			append(div12, t7);
			append(div12, div8);
			append(div12, t8);
			append(div12, div9);
			append(div12, t9);
			append(div12, div10);
			append(div12, t10);
			append(div12, div11);
			insert(target, t11, anchor);
			insert(target, div21, anchor);
			append(div21, div14);
			append(div21, t12);
			append(div21, div15);
			append(div21, t13);
			append(div21, span0);
			append(div21, t15);
			append(div21, div16);
			append(div21, t16);
			append(div21, div17);
			append(div21, t17);
			append(div21, span1);
			append(div21, t19);
			append(div21, div18);
			append(div21, t20);
			append(div21, div19);
			append(div21, t21);
			append(div21, div20);
			append(div21, t22);
			append(div21, span2);
			append(div21, t24);
			if (if_block0) if_block0.m(div21, null);
			append(div21, t25);
			append(div21, span3);
			append(div21, t27);
			if (if_block1) if_block1.m(div21, null);
			append(div21, t28);
			if (if_block2) if_block2.m(div21, null);
			append(div21, t29);
			if (if_block3) if_block3.m(div21, null);
			append(div21, t30);
			if (if_block4) if_block4.m(div21, null);
			append(div21, t31);
			if (if_block5) if_block5.m(div21, null);
			append(div21, t32);
			if (if_block6) if_block6.m(div21, null);
			append(div21, t33);
			if (if_block7) if_block7.m(div21, null);
			append(div21, t34);
			if (if_block8) if_block8.m(div21, null);
			append(div21, t35);
			if (if_block9) if_block9.m(div21, null);
			append(div21, t36);
			if (if_block10) if_block10.m(div21, null);
			append(div21, t37);
			if (if_block11) if_block11.m(div21, null);
			append(div21, t38);
			if (if_block12) if_block12.m(div21, null);
			append(div21, t39);
			if (if_block13) if_block13.m(div21, null);
			append(div21, t40);
			if (if_block14) if_block14.m(div21, null);
			append(div21, t41);
			if (if_block15) if_block15.m(div21, null);
			append(div21, t42);
			if (if_block16) if_block16.m(div21, null);
			append(div21, t43);
			if (if_block17) if_block17.m(div21, null);
			append(div21, t44);
			if (if_block18) if_block18.m(div21, null);
			append(div21, t45);
			if (if_block19) if_block19.m(div21, null);
			append(div21, t46);
			if (if_block20) if_block20.m(div21, null);
			append(div21, t47);
			if (if_block21) if_block21.m(div21, null);
			append(div21, t48);
			if (if_block22) if_block22.m(div21, null);
			append(div21, t49);
			if (if_block23) if_block23.m(div21, null);
			append(div21, t50);
			if (if_block24) if_block24.m(div21, null);
			append(div21, t51);
			if (if_block25) if_block25.m(div21, null);
			append(div21, t52);
			if (if_block26) if_block26.m(div21, null);
			append(div21, t53);
			if (if_block27) if_block27.m(div21, null);
			append(div21, t54);
			if (if_block28) if_block28.m(div21, null);
			append(div21, t55);
			if (if_block29) if_block29.m(div21, null);
			append(div21, t56);
			if (if_block30) if_block30.m(div21, null);
			append(div21, t57);
			if (if_block31) if_block31.m(div21, null);
			append(div21, t58);
			if (if_block32) if_block32.m(div21, null);
			append(div21, t59);
			if (if_block33) if_block33.m(div21, null);
			append(div21, t60);
			if (if_block34) if_block34.m(div21, null);
			append(div21, t61);
			if (if_block35) if_block35.m(div21, null);
			insert(target, t62, anchor);
			insert(target, div28, anchor);
			append(div28, div22);
			append(div28, t63);
			append(div28, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*magnification*/ ctx[13]);
			append(div28, t64);
			append(div28, div23);
			append(div28, t65);
			append(div28, button0);
			append(button0, t66);
			append(div28, t67);
			append(div28, div24);
			append(div28, t68);
			append(div28, button1);
			append(button1, t69);
			append(div28, t70);
			append(div28, div25);
			append(div28, t71);
			append(div28, span4);
			append(div28, t75);
			append(div28, span5);
			append(div28, t79);
			append(div28, div26);
			append(div28, t80);
			append(div28, div27);
			append(div28, t81);
			append(div28, input);
			set_input_value(input, /*guass_blur_level*/ ctx[46]);
			insert(target, t82, anchor);
			insert(target, div30, anchor);
			append(div30, div29);
			append(div29, canvas);
			/*canvas_binding*/ ctx[106](canvas);
			append(div29, t83);
			mount_component(canedit, div29, null);
			append(div29, t84);
			mount_component(ruler0, div29, null);
			append(div29, t85);
			mount_component(ruler1, div29, null);
			/*div29_binding*/ ctx[107](div29);
			/*div30_binding*/ ctx[108](div30);
			insert(target, t86, anchor);
			mount_component(burgermenu, target, anchor);
			insert(target, t87, anchor);
			insert(target, div31, anchor);
			mount_component(hsvpicker, div31, null);
			insert(target, t88, anchor);
			mount_component(modal0, target, anchor);
			insert(target, t89, anchor);
			mount_component(modal1, target, anchor);
			insert(target, t90, anchor);
			mount_component(modal2, target, anchor);
			insert(target, t91, anchor);
			mount_component(modal3, target, anchor);
			insert(target, t92, anchor);
			mount_component(modal4, target, anchor);
			insert(target, t93, anchor);
			mount_component(modal5, target, anchor);
			insert(target, t94, anchor);
			mount_component(modal6, target, anchor);
			insert(target, t95, anchor);
			mount_component(modal7, target, anchor);
			insert(target, t96, anchor);
			mount_component(floatwindow0, target, anchor);
			insert(target, t97, anchor);
			mount_component(floatwindow1, target, anchor);
			insert(target, t98, anchor);
			mount_component(floatwindow2, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[68]),
					listen(div2, "click", /*click_handler_1*/ ctx[69]),
					listen(div3, "click", /*click_handler_2*/ ctx[70]),
					listen(div4, "click", /*click_handler_3*/ ctx[71]),
					listen(div5, "click", /*click_handler_4*/ ctx[72]),
					listen(div6, "click", /*click_handler_5*/ ctx[73]),
					listen(div7, "click", /*click_handler_6*/ ctx[74]),
					listen(div8, "click", /*click_handler_7*/ ctx[75]),
					listen(div9, "click", /*click_handler_8*/ ctx[76]),
					listen(div10, "click", /*click_handler_9*/ ctx[77]),
					listen(div11, "click", /*click_handler_10*/ ctx[78]),
					listen(div22, "click", /*click_handler_11*/ ctx[102]),
					listen(select, "change", /*select_change_handler_3*/ ctx[103]),
					listen(select, "change", /*set_magnification*/ ctx[53]),
					listen(button0, "click", /*show_picker*/ ctx[60]),
					listen(button1, "click", /*show_picker*/ ctx[60]),
					listen(div26, "click", /*click_handler_12*/ ctx[104]),
					listen(input, "input", /*input_input_handler_18*/ ctx[105]),
					listen(input, "change", /*blurry_changed*/ ctx[59]),
					listen(div30, "scroll", /*scroll_rulers*/ ctx[61])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*selection_mode*/ ctx[18]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_37(ctx);
					if_block0.c();
					if_block0.m(div21, t25);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*selection_mode*/ 262144) show_if_34 = /*selection_mode*/ ctx[18] && /*selection_mode_var*/ ctx[58]('rotate');

			if (show_if_34) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_36(ctx);
					if_block1.c();
					if_block1.m(div21, t28);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_33 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('x');

			if (show_if_33) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_35(ctx);
					if_block2.c();
					if_block2.m(div21, t29);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_32 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('y');

			if (show_if_32) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_34(ctx);
					if_block3.c();
					if_block3.m(div21, t30);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_31 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('w');

			if (show_if_31) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_33(ctx);
					if_block4.c();
					if_block4.m(div21, t31);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_30 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('h');

			if (show_if_30) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_32(ctx);
					if_block5.c();
					if_block5.m(div21, t32);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_29 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('x1');

			if (show_if_29) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_31(ctx);
					if_block6.c();
					if_block6.m(div21, t33);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_28 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('y1');

			if (show_if_28) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_30(ctx);
					if_block7.c();
					if_block7.m(div21, t34);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_27 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('x2');

			if (show_if_27) {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block_29(ctx);
					if_block8.c();
					if_block8.m(div21, t35);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_26 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('y2');

			if (show_if_26) {
				if (if_block9) {
					if_block9.p(ctx, dirty);
				} else {
					if_block9 = create_if_block_28(ctx);
					if_block9.c();
					if_block9.m(div21, t36);
				}
			} else if (if_block9) {
				if_block9.d(1);
				if_block9 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_25 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('cx');

			if (show_if_25) {
				if (if_block10) {
					if_block10.p(ctx, dirty);
				} else {
					if_block10 = create_if_block_27(ctx);
					if_block10.c();
					if_block10.m(div21, t37);
				}
			} else if (if_block10) {
				if_block10.d(1);
				if_block10 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_24 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('cy');

			if (show_if_24) {
				if (if_block11) {
					if_block11.p(ctx, dirty);
				} else {
					if_block11 = create_if_block_26(ctx);
					if_block11.c();
					if_block11.m(div21, t38);
				}
			} else if (if_block11) {
				if_block11.d(1);
				if_block11 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_23 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('rx');

			if (show_if_23) {
				if (if_block12) {
					if_block12.p(ctx, dirty);
				} else {
					if_block12 = create_if_block_25(ctx);
					if_block12.c();
					if_block12.m(div21, t39);
				}
			} else if (if_block12) {
				if_block12.d(1);
				if_block12 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_22 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('ry');

			if (show_if_22) {
				if (if_block13) {
					if_block13.p(ctx, dirty);
				} else {
					if_block13 = create_if_block_24(ctx);
					if_block13.c();
					if_block13.m(div21, t40);
				}
			} else if (if_block13) {
				if_block13.d(1);
				if_block13 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_21 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('group');

			if (show_if_21) {
				if (if_block14) {
					
				} else {
					if_block14 = create_if_block_23(ctx);
					if_block14.c();
					if_block14.m(div21, t41);
				}
			} else if (if_block14) {
				if_block14.d(1);
				if_block14 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_20 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('ungroup');

			if (show_if_20) {
				if (if_block15) {
					
				} else {
					if_block15 = create_if_block_22(ctx);
					if_block15.c();
					if_block15.m(div21, t42);
				}
			} else if (if_block15) {
				if_block15.d(1);
				if_block15 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_19 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('relative');

			if (show_if_19) {
				if (if_block16) {
					if_block16.p(ctx, dirty);
				} else {
					if_block16 = create_if_block_21(ctx);
					if_block16.c();
					if_block16.m(div21, t43);
				}
			} else if (if_block16) {
				if_block16.d(1);
				if_block16 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_18 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('corner');

			if (show_if_18) {
				if (if_block17) {
					if_block17.p(ctx, dirty);
				} else {
					if_block17 = create_if_block_20(ctx);
					if_block17.c();
					if_block17.m(div21, t44);
				}
			} else if (if_block17) {
				if_block17.d(1);
				if_block17 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_17 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('bold');

			if (show_if_17) {
				if (if_block18) {
					
				} else {
					if_block18 = create_if_block_19(ctx);
					if_block18.c();
					if_block18.m(div21, t45);
				}
			} else if (if_block18) {
				if_block18.d(1);
				if_block18 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_16 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('italic');

			if (show_if_16) {
				if (if_block19) {
					
				} else {
					if_block19 = create_if_block_18(ctx);
					if_block19.c();
					if_block19.m(div21, t46);
				}
			} else if (if_block19) {
				if_block19.d(1);
				if_block19 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_15 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('font');

			if (show_if_15) {
				if (if_block20) {
					if_block20.p(ctx, dirty);
				} else {
					if_block20 = create_if_block_17(ctx);
					if_block20.c();
					if_block20.m(div21, t47);
				}
			} else if (if_block20) {
				if_block20.d(1);
				if_block20 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_14 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-left');

			if (show_if_14) {
				if (if_block21) {
					
				} else {
					if_block21 = create_if_block_16(ctx);
					if_block21.c();
					if_block21.m(div21, t48);
				}
			} else if (if_block21) {
				if_block21.d(1);
				if_block21 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_13 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-center');

			if (show_if_13) {
				if (if_block22) {
					
				} else {
					if_block22 = create_if_block_15(ctx);
					if_block22.c();
					if_block22.m(div21, t49);
				}
			} else if (if_block22) {
				if_block22.d(1);
				if_block22 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_12 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-right');

			if (show_if_12) {
				if (if_block23) {
					
				} else {
					if_block23 = create_if_block_14(ctx);
					if_block23.c();
					if_block23.m(div21, t50);
				}
			} else if (if_block23) {
				if_block23.d(1);
				if_block23 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_11 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-top');

			if (show_if_11) {
				if (if_block24) {
					
				} else {
					if_block24 = create_if_block_13(ctx);
					if_block24.c();
					if_block24.m(div21, t51);
				}
			} else if (if_block24) {
				if_block24.d(1);
				if_block24 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_10 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-middle');

			if (show_if_10) {
				if (if_block25) {
					
				} else {
					if_block25 = create_if_block_12(ctx);
					if_block25.c();
					if_block25.m(div21, t52);
				}
			} else if (if_block25) {
				if_block25.d(1);
				if_block25 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_9 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('align-bottom');

			if (show_if_9) {
				if (if_block26) {
					
				} else {
					if_block26 = create_if_block_11(ctx);
					if_block26.c();
					if_block26.m(div21, t53);
				}
			} else if (if_block26) {
				if_block26.d(1);
				if_block26 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_8 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('curve');

			if (show_if_8) {
				if (if_block27) {
					if_block27.p(ctx, dirty);
				} else {
					if_block27 = create_if_block_10(ctx);
					if_block27.c();
					if_block27.m(div21, t54);
				}
			} else if (if_block27) {
				if_block27.d(1);
				if_block27 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_7 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('clone-node');

			if (show_if_7) {
				if (if_block28) {
					
				} else {
					if_block28 = create_if_block_9(ctx);
					if_block28.c();
					if_block28.m(div21, t55);
				}
			} else if (if_block28) {
				if_block28.d(1);
				if_block28 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_6 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('delete-node');

			if (show_if_6) {
				if (if_block29) {
					
				} else {
					if_block29 = create_if_block_8(ctx);
					if_block29.c();
					if_block29.m(div21, t56);
				}
			} else if (if_block29) {
				if_block29.d(1);
				if_block29 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_5 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('subpath');

			if (show_if_5) {
				if (if_block30) {
					
				} else {
					if_block30 = create_if_block_7(ctx);
					if_block30.c();
					if_block30.m(div21, t57);
				}
			} else if (if_block30) {
				if_block30.d(1);
				if_block30 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_4 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('add-subpath');

			if (show_if_4) {
				if (if_block31) {
					
				} else {
					if_block31 = create_if_block_6(ctx);
					if_block31.c();
					if_block31.m(div21, t58);
				}
			} else if (if_block31) {
				if_block31.d(1);
				if_block31 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_3 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('points');

			if (show_if_3) {
				if (if_block32) {
					if_block32.p(ctx, dirty);
				} else {
					if_block32 = create_if_block_5(ctx);
					if_block32.c();
					if_block32.m(div21, t59);
				}
			} else if (if_block32) {
				if_block32.d(1);
				if_block32 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_2 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('sides');

			if (show_if_2) {
				if (if_block33) {
					if_block33.p(ctx, dirty);
				} else {
					if_block33 = create_if_block_4(ctx);
					if_block33.c();
					if_block33.m(div21, t60);
				}
			} else if (if_block33) {
				if_block33.d(1);
				if_block33 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if_1 = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('pointiness');

			if (show_if_1) {
				if (if_block34) {
					if_block34.p(ctx, dirty);
				} else {
					if_block34 = create_if_block_3(ctx);
					if_block34.c();
					if_block34.m(div21, t61);
				}
			} else if (if_block34) {
				if_block34.d(1);
				if_block34 = null;
			}

			if (dirty[0] & /*g_selector*/ 4194304) show_if = /*g_selector*/ ctx[22] && /*selection_mode_var*/ ctx[58]('radial-shift');

			if (show_if) {
				if (if_block35) {
					if_block35.p(ctx, dirty);
				} else {
					if_block35 = create_if_block_2(ctx);
					if_block35.c();
					if_block35.m(div21, null);
				}
			} else if (if_block35) {
				if_block35.d(1);
				if_block35 = null;
			}

			if (dirty[1] & /*magnifications*/ 2097152) {
				each_value = /*magnifications*/ ctx[52];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty[0] & /*magnification*/ 8192 | dirty[1] & /*magnifications*/ 2097152) {
				select_option(select, /*magnification*/ ctx[13]);
			}

			if (dirty[1] & /*guass_blur_level*/ 32768 && to_number(input.value) !== /*guass_blur_level*/ ctx[46]) {
				set_input_value(input, /*guass_blur_level*/ ctx[46]);
			}

			if (!current || dirty[0] & /*g_calc_doc_width*/ 4) {
				attr(canvas, "width", /*g_calc_doc_width*/ ctx[2]);
			}

			if (!current || dirty[0] & /*g_calc_doc_height*/ 8) {
				attr(canvas, "height", /*g_calc_doc_height*/ ctx[3]);
			}

			if (!current || dirty[0] & /*g_calc_doc_width*/ 4) {
				set_style(canvas, "width", /*g_calc_doc_width*/ ctx[2] + "px");
			}

			if (!current || dirty[0] & /*g_calc_doc_height*/ 8) {
				set_style(canvas, "height", /*g_calc_doc_height*/ ctx[3] + "px");
			}

			if (!current || dirty[0] & /*g_doc_left*/ 1) {
				set_style(canvas, "left", /*g_doc_left*/ ctx[0] + "px");
			}

			if (!current || dirty[0] & /*g_doc_top*/ 2) {
				set_style(canvas, "top", /*g_doc_top*/ ctx[1] + "px");
			}

			const canedit_changes = (dirty[0] & /*edit_props*/ 131072)
			? get_spread_update(canedit_spread_levels, [get_spread_object(/*edit_props*/ ctx[17])])
			: {};

			canedit.$set(canedit_changes);
			const ruler0_changes = {};
			if (dirty[1] & /*ruler_top*/ 262144) ruler0_changes.ruler_top = /*ruler_top*/ ctx[49];
			if (dirty[0] & /*ruler_magnification*/ 16384) ruler0_changes.ruler_magnification = /*ruler_magnification*/ ctx[14];
			if (dirty[0] & /*h_zero_tick*/ 32768) ruler0_changes.zero_tick = /*h_zero_tick*/ ctx[15];
			ruler0.$set(ruler0_changes);
			const ruler1_changes = {};
			if (dirty[1] & /*ruler_left*/ 131072) ruler1_changes.ruler_left = /*ruler_left*/ ctx[48];
			if (dirty[0] & /*ruler_magnification*/ 16384) ruler1_changes.ruler_magnification = /*ruler_magnification*/ ctx[14];
			if (dirty[0] & /*v_zero_tick*/ 65536) ruler1_changes.zero_tick = /*v_zero_tick*/ ctx[16];
			ruler1.$set(ruler1_changes);

			if (!current || dirty[0] & /*g_calc_container_width*/ 2048) {
				set_style(div29, "width", /*g_calc_container_width*/ ctx[11] + "px");
			}

			if (!current || dirty[0] & /*g_calc_container_height*/ 4096) {
				set_style(div29, "height", /*g_calc_container_height*/ ctx[12] + "px");
			}

			if (!current || dirty[0] & /*tool_cursor*/ 524288) {
				set_style(div29, "cursor", /*tool_cursor*/ ctx[19]);
			}

			const burgermenu_changes = {};

			if (dirty[0] & /*g_db_store, project_selected*/ 96 | dirty[5] & /*$$scope*/ 16) {
				burgermenu_changes.$$scope = { dirty, ctx };
			}

			burgermenu.$set(burgermenu_changes);

			if (!current || dirty[1] & /*is_viz*/ 65536) {
				set_style(div31, "visibility", /*is_viz*/ ctx[47]);
			}

			if (!current || dirty[0] & /*colorizer_top*/ 33554432) {
				set_style(div31, "top", /*colorizer_top*/ ctx[25]);
			}

			if (!current || dirty[0] & /*colorizer_left*/ 67108864) {
				set_style(div31, "left", /*colorizer_left*/ ctx[26]);
			}

			const modal0_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) modal0_changes.visible = /*g_visibile_items*/ ctx[50].project_manage;

			if (dirty[1] & /*g_visibile_items*/ 524288 | dirty[5] & /*$$scope*/ 16) {
				modal0_changes.$$scope = { dirty, ctx };
			}

			modal0.$set(modal0_changes);
			const modal1_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) modal1_changes.visible = /*g_visibile_items*/ ctx[50].project_open;

			if (dirty[1] & /*g_visibile_items*/ 524288 | dirty[5] & /*$$scope*/ 16) {
				modal1_changes.$$scope = { dirty, ctx };
			}

			modal1.$set(modal1_changes);
			const modal2_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) modal2_changes.visible = /*g_visibile_items*/ ctx[50].project_save;

			if (dirty[1] & /*g_visibile_items*/ 524288 | dirty[5] & /*$$scope*/ 16) {
				modal2_changes.$$scope = { dirty, ctx };
			}

			modal2.$set(modal2_changes);
			const modal3_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) modal3_changes.visible = /*g_visibile_items*/ ctx[50].svg_import;

			if (dirty[1] & /*g_visibile_items*/ 524288 | dirty[5] & /*$$scope*/ 16) {
				modal3_changes.$$scope = { dirty, ctx };
			}

			modal3.$set(modal3_changes);
			const modal4_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) modal4_changes.visible = /*g_visibile_items*/ ctx[50].svg_export;

			if (dirty[0] & /*g_exportable*/ 128 | dirty[1] & /*g_visibile_items*/ 524288 | dirty[5] & /*$$scope*/ 16) {
				modal4_changes.$$scope = { dirty, ctx };
			}

			modal4.$set(modal4_changes);
			const modal5_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) modal5_changes.visible = /*g_visibile_items*/ ctx[50].svg_save;

			if (dirty[0] & /*g_exportable*/ 128 | dirty[1] & /*g_visibile_items*/ 524288 | dirty[5] & /*$$scope*/ 16) {
				modal5_changes.$$scope = { dirty, ctx };
			}

			modal5.$set(modal5_changes);
			const modal6_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) modal6_changes.visible = /*g_visibile_items*/ ctx[50].doc_properties;

			if (dirty[1] & /*g_visibile_items*/ 524288 | dirty[5] & /*$$scope*/ 16) {
				modal6_changes.$$scope = { dirty, ctx };
			}

			modal6.$set(modal6_changes);
			const modal7_changes = {};
			if (dirty[1] & /*g_visibile_items*/ 524288) modal7_changes.visible = /*g_visibile_items*/ ctx[50].editor_prefs;

			if (dirty[1] & /*g_visibile_items*/ 524288 | dirty[5] & /*$$scope*/ 16) {
				modal7_changes.$$scope = { dirty, ctx };
			}

			modal7.$set(modal7_changes);
			const floatwindow0_changes = {};

			if (dirty[5] & /*$$scope*/ 16) {
				floatwindow0_changes.$$scope = { dirty, ctx };
			}

			floatwindow0.$set(floatwindow0_changes);
			const floatwindow1_changes = {};

			if (dirty[5] & /*$$scope*/ 16) {
				floatwindow1_changes.$$scope = { dirty, ctx };
			}

			floatwindow1.$set(floatwindow1_changes);
			const floatwindow2_changes = {};

			if (dirty[5] & /*$$scope*/ 16) {
				floatwindow2_changes.$$scope = { dirty, ctx };
			}

			floatwindow2.$set(floatwindow2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(canedit.$$.fragment, local);
			transition_in(ruler0.$$.fragment, local);
			transition_in(ruler1.$$.fragment, local);
			transition_in(burgermenu.$$.fragment, local);
			transition_in(hsvpicker.$$.fragment, local);
			transition_in(modal0.$$.fragment, local);
			transition_in(modal1.$$.fragment, local);
			transition_in(modal2.$$.fragment, local);
			transition_in(modal3.$$.fragment, local);
			transition_in(modal4.$$.fragment, local);
			transition_in(modal5.$$.fragment, local);
			transition_in(modal6.$$.fragment, local);
			transition_in(modal7.$$.fragment, local);
			transition_in(floatwindow0.$$.fragment, local);
			transition_in(floatwindow1.$$.fragment, local);
			transition_in(floatwindow2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(canedit.$$.fragment, local);
			transition_out(ruler0.$$.fragment, local);
			transition_out(ruler1.$$.fragment, local);
			transition_out(burgermenu.$$.fragment, local);
			transition_out(hsvpicker.$$.fragment, local);
			transition_out(modal0.$$.fragment, local);
			transition_out(modal1.$$.fragment, local);
			transition_out(modal2.$$.fragment, local);
			transition_out(modal3.$$.fragment, local);
			transition_out(modal4.$$.fragment, local);
			transition_out(modal5.$$.fragment, local);
			transition_out(modal6.$$.fragment, local);
			transition_out(modal7.$$.fragment, local);
			transition_out(floatwindow0.$$.fragment, local);
			transition_out(floatwindow1.$$.fragment, local);
			transition_out(floatwindow2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div13);
			if (detaching) detach(t11);
			if (detaching) detach(div21);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (if_block8) if_block8.d();
			if (if_block9) if_block9.d();
			if (if_block10) if_block10.d();
			if (if_block11) if_block11.d();
			if (if_block12) if_block12.d();
			if (if_block13) if_block13.d();
			if (if_block14) if_block14.d();
			if (if_block15) if_block15.d();
			if (if_block16) if_block16.d();
			if (if_block17) if_block17.d();
			if (if_block18) if_block18.d();
			if (if_block19) if_block19.d();
			if (if_block20) if_block20.d();
			if (if_block21) if_block21.d();
			if (if_block22) if_block22.d();
			if (if_block23) if_block23.d();
			if (if_block24) if_block24.d();
			if (if_block25) if_block25.d();
			if (if_block26) if_block26.d();
			if (if_block27) if_block27.d();
			if (if_block28) if_block28.d();
			if (if_block29) if_block29.d();
			if (if_block30) if_block30.d();
			if (if_block31) if_block31.d();
			if (if_block32) if_block32.d();
			if (if_block33) if_block33.d();
			if (if_block34) if_block34.d();
			if (if_block35) if_block35.d();
			if (detaching) detach(t62);
			if (detaching) detach(div28);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t82);
			if (detaching) detach(div30);
			/*canvas_binding*/ ctx[106](null);
			destroy_component(canedit);
			destroy_component(ruler0);
			destroy_component(ruler1);
			/*div29_binding*/ ctx[107](null);
			/*div30_binding*/ ctx[108](null);
			if (detaching) detach(t86);
			destroy_component(burgermenu, detaching);
			if (detaching) detach(t87);
			if (detaching) detach(div31);
			destroy_component(hsvpicker);
			if (detaching) detach(t88);
			destroy_component(modal0, detaching);
			if (detaching) detach(t89);
			destroy_component(modal1, detaching);
			if (detaching) detach(t90);
			destroy_component(modal2, detaching);
			if (detaching) detach(t91);
			destroy_component(modal3, detaching);
			if (detaching) detach(t92);
			destroy_component(modal4, detaching);
			if (detaching) detach(t93);
			destroy_component(modal5, detaching);
			if (detaching) detach(t94);
			destroy_component(modal6, detaching);
			if (detaching) detach(t95);
			destroy_component(modal7, detaching);
			if (detaching) detach(t96);
			destroy_component(floatwindow0, detaching);
			if (detaching) detach(t97);
			destroy_component(floatwindow1, detaching);
			if (detaching) detach(t98);
			destroy_component(floatwindow2, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

const INTERVAL_ruler = 50;
let g_doc_width = 640;
let g_doc_height = 480;
let object_text_bold = false;
let object_text_italic = false;

//
let show_hide_grid = "Show";

let show_hide_wireframe = "Show";
let fill_color = "#00FFFF";
let fill_color_inverted = "#FF0000";
let stroke_color = "#00FFFF";
let stroke_color_inverted = "#FF0000";
let alpha_value_fill = 100;
let alpha_value_line = 100;

function colorCallback(rgba) {
	console.log(rgba.detail);
}

function toggle_float(float_name) {
	switch (float_name) {
		case "library-view":
			{
				start_floating_window(0);
				break;
			}
		case "svg-edit":
			{
				start_floating_window(1);
				break;
			}
		case "layers-manager":
			{
				start_floating_window(2);
				break;
			}
		default:
			{
				break;
			}
	}
}

function toggle_wireframe(evt) {
	
}

function instance($$self, $$props, $$invalidate) {
	let project_selected = false;
	let g_db_store = null;
	let g_exportable = false;

	db_store.subscribe(db_obj => {
		if (!db_obj) {
			$$invalidate(5, project_selected = false);
			$$invalidate(6, g_db_store = null);
			$$invalidate(7, g_exportable = false);
		} else {
			$$invalidate(6, g_db_store = db_obj);
			$$invalidate(5, project_selected = db_obj.ready);

			$$invalidate(7, g_exportable = db_obj.current_file_entry
			? db_obj.current_file_entry.name
			: false);

			if (g_exportable === undefined || g_exportable === null) $$invalidate(7, g_exportable = false);
		}
	});

	let window_scale = { "w": 0.4, "h": 0.6 };

	//
	window_scale = popup_size();

	let all_window_scales = [];
	all_window_scales.push(window_scale);
	all_window_scales.push(window_scale);
	all_window_scales.push(window_scale);

	//
	onMount(async () => {
		//
		await db_startup(); // return value ??

		//
		window.addEventListener("resize", e => {
			//
			let scale = popup_size();

			//
			window_scale.h = scale.h;

			window_scale.w = scale.w;
		}); //
	});

	let g_canvas_element;
	let g_canvas_container;
	let g_canvas_system;
	let g_show_grid = false;
	let g_doc_left = 100;
	let g_doc_top = 100;
	let g_calc_container_width = 2 * g_doc_width;
	let g_calc_container_height = 2 * g_doc_height;
	let g_calc_doc_width = g_doc_width;
	let g_calc_doc_height = g_doc_height;
	let magnification = 100;
	let calc_magnification = magnification / 100.0;

	let magnifications = [
		{ value: 400, text: "400%" },
		{ value: 200, text: "200%" },
		{ value: 100, text: "100%" },
		{ value: 50, text: "50%" },
		{ value: 25, text: "25%" },
		{ value: -1, text: "fit to canvas" },
		{ value: -2, text: "fit to selection" },
		{ value: -3, text: "fit to layer content" },
		{ value: -4, text: "fit to all" }
	];

	let ruler_magnification = magnification / 100;
	let h_zero_tick = 0;
	let v_zero_tick = 0;
	setTimeout(set_magnification, 100);

	// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
	let edit_props = {
		height: 460,
		width: 680,
		doc_height: 460,
		doc_width: 680,
		doc_left: 0,
		doc_top: 0,
		drawing_name: g_db_store.current_file_entry
		? g_db_store.current_file_entry.name
		: "Untitled-1",
		grid_on: false,
		magnification: 1.0,
		ruler_interval: 50,
		tool: "select"
	};

	// ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
	//
	function set_magnification(evt) {
		if (magnification > 0) {
			if (g_canvas_system) {
				//
				$$invalidate(66, calc_magnification = magnification / 100);

				$$invalidate(14, ruler_magnification = calc_magnification);
				$$invalidate(2, g_calc_doc_width = g_doc_width * calc_magnification);
				$$invalidate(3, g_calc_doc_height = g_doc_height * calc_magnification);

				//
				let system_rect = g_canvas_system.getBoundingClientRect();

				let w = system_rect.width;
				let h = system_rect.height;

				if (g_calc_doc_width <= w) {
					$$invalidate(11, g_calc_container_width = w + 100); // putting a default mat around everything allowing some small degree of scrolling
				} else if (g_calc_doc_width > w) {
					$$invalidate(11, g_calc_container_width = g_calc_doc_width + 10); // putting a default mat around everything allowing some small degree of scrolling
				}

				if (g_calc_doc_height <= h) {
					$$invalidate(12, g_calc_container_height = h + 100); // putting a default mat around everything allowing some small degree of scrolling
				} else if (g_calc_doc_height > h) {
					$$invalidate(12, g_calc_container_height = g_calc_doc_height + 10);
				}

				setTimeout(
					() => {
						$$invalidate(0, g_doc_left = Math.floor(g_calc_container_width / 2) - Math.floor(g_calc_doc_width / 2));
						$$invalidate(1, g_doc_top = Math.floor(g_calc_container_height / 2) - Math.floor(g_calc_doc_height / 2));
						$$invalidate(16, v_zero_tick = g_doc_top);
						$$invalidate(15, h_zero_tick = g_doc_left);

						if (g_show_grid && g_canvas_element) {
							
						} // draw_grid_on_canvas(g_canvas_element,calc_magnification)
					},
					20
				);
			}
		} else {
			
		} // TBD
	}

	let selection_mode = true;
	let tool_cursor = "default";
	let g_current_tool = "select";
	let rect_selected = true;
	let text_selected = false;
	let path_selected = false;
	let circle_selected = false;
	let line_selected = false;
	let polygon_selected = false;
	let star_selected = false;
	let picture_selected = false;
	let component_selected = false;
	let eye_dropper_selected = false;
	let connector_selected = false;
	let group_selected = false;
	let ungroup_selected = false;
	let curve_selected = false;
	let grouping_reference = "selected objects";
	let grouping_references = ["selected objects", "largest object", "smallest object", "page"];
	let path_segment_style = "curve";
	let path_segment_styles = ["straight", "curve"];

	//
	let mode_toggle = 'select';

	let g_selector = false;

	function set_selection_mode(mode_name) {
		rect_selected = false;
		text_selected = false;
		path_selected = false;
		circle_selected = false;
		line_selected = false;
		polygon_selected = false;
		star_selected = false;
		picture_selected = false;
		component_selected = false;
		eye_dropper_selected = false;
		connector_selected = false;
		group_selected = false;
		ungroup_selected = false;
		curve_selected = false;

		//
		$$invalidate(4, mode_toggle = mode_name);

		$$invalidate(67, g_current_tool = mode_name);

		switch (mode_name) {
			case 'select':
				{
					$$invalidate(18, selection_mode = false);
					$$invalidate(19, tool_cursor = "default");
					break;
				}
			case 'zoom':
				{
					$$invalidate(18, selection_mode = false);
					$$invalidate(19, tool_cursor = "zoom-in");
					break;
				}
			case 'pencil':
				{
					$$invalidate(18, selection_mode = true);
					line_selected = true;
					$$invalidate(19, tool_cursor = `url(./zondicons/edit-pencil.svg), auto`);
					break;
				}
			case 'pen':
			case 'path':
				{
					$$invalidate(18, selection_mode = true);
					path_selected = true;
					$$invalidate(19, tool_cursor = `url(./zondicons/pen-tool.svg), auto`);
					break;
				}
			case 'rect':
				{
					$$invalidate(18, selection_mode = true);
					rect_selected = true;
					$$invalidate(19, tool_cursor = "default");
					$$invalidate(19, tool_cursor = `url(./images/rect-tool.svg), auto`);
					break;
				}
			case 'ellipse':
				{
					$$invalidate(18, selection_mode = true);
					circle_selected = true;
					$$invalidate(19, tool_cursor = `url(./images/ellipse-tool.svg), auto`);
					break;
				}
			case 'polygon':
				{
					$$invalidate(18, selection_mode = true);
					polygon_selected = true;
					$$invalidate(19, tool_cursor = `url(./images/polygon-tool.svg), auto`);
					break;
				}
			case 'star':
				{
					$$invalidate(18, selection_mode = true);
					star_selected = true;
					$$invalidate(19, tool_cursor = "default");
					$$invalidate(19, tool_cursor = `url(./images/star-tool.svg), auto`);
					break;
				}
			case 'text':
				{
					$$invalidate(18, selection_mode = true);
					text_selected = true;
					$$invalidate(19, tool_cursor = "text");
					break;
				}
			case 'load':
				{
					$$invalidate(18, selection_mode = true);
					picture_selected = true;
					$$invalidate(19, tool_cursor = "default");
					break;
				}
			case 'eye_dropper':
				{
					$$invalidate(18, selection_mode = false);
					eye_dropper_selected = true;
					$$invalidate(19, tool_cursor = `url(./images/eye_dropper-cursor.svg), auto`);
					break;
				}
			case 'connector':
				{
					$$invalidate(18, selection_mode = true);
					connector_selected = true;
					$$invalidate(19, tool_cursor = `url(./zondicons/share.svg), auto`);
					break;
				}
			default:
				{
					$$invalidate(67, g_current_tool = "select");
					break;
				}
		}
	}

	let id_selected = "";
	let class_selected = "";
	let colorizer_top = "90px";
	let colorizer_left = "90px";
	let object_x = 0.0;
	let object_y = 0.0;
	let object_width = 0.0;
	let object_height = 0.0;

	//
	let object_x1 = 0.0;

	let object_y1 = 0.0;
	let object_x2 = 0.0;
	let object_y2 = 0.0;

	//
	let object_cx = 0.0;

	let object_cy = 0.0;
	let object_rx = 0.0;
	let object_ry = 0.0;
	let object_points = 3;
	let object_sides = 3;
	let object_pointiness = 1;
	let object_radial_shift = 1;
	let object_rotate = 0.0;
	let object_corner = 0.0;
	let object_text_font = "Serif";

	let object_text_fonts = [
		{ value: 1, text: "Serif" },
		{ value: 2, text: "Sans-serif" },
		{ value: 3, text: "Cursive" },
		{ value: 4, text: "Fantasy" },
		{ value: 5, text: "Monospace" },
		{ value: 6, text: "Courier" },
		{ value: 7, text: "Helvtica" },
		{ value: 8, text: "Times" }
	];

	//
	let text_names = [
		"x",
		"y",
		"bold",
		"italic",
		"font",
		"align-left",
		"align-center",
		"align-right"
	];

	let rect_names = ["x", "y", "w", "h", "corner"];
	let circle_names = ["cx", "cy", "rx", "ry"];
	let line_names = ["x1", "y1", "x2", "y2"];
	let path_names = ["x", "y"];
	let polygon_names = ["x", "y", "sides"];
	let star_names = ["x", "y", "points", "pointiness", "radial-shift"];
	let component_names = ["x", "y"];

	let group_names = [
		"x",
		"y",
		"group",
		"relative",
		"align-left",
		"align-center",
		"align-right",
		"align-top",
		"align-middle",
		"align-bottom"
	];

	let grouped_names = ["x", "y", "label", "ungroup"];
	let curve_names = ["x", "y", "curve", "clone-node", "delete-node", "subpath", "add-subpath"];

	function selection_mode_var(var_name) {
		if (selection_mode && var_name == "rotate") return true;

		if (circle_selected && circle_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (line_selected && line_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (rect_selected && rect_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (text_selected && text_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (path_selected && path_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (group_selected && group_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (ungroup_selected && grouped_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (curve_selected && curve_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (polygon_selected && polygon_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (star_selected && star_names.indexOf(var_name) >= 0) {
			return true;
		}

		if (component_selected && component_names.indexOf(var_name) >= 0) {
			return true;
		}

		return false;
	}

	let guass_blur_level = 0;

	function blurry_changed(event) {
		let blurry = event.target;
		let blr = parseInt(blurry.value);
		if (blr > 100) blurry.value = "100";
		if (blr < 0) blurry.value = "0";
		$$invalidate(46, guass_blur_level = parseInt(blurry.value));
	}

	let is_viz = "hidden";

	function show_picker(evt) {
		$$invalidate(47, is_viz = is_viz === "hidden" ? "visible" : "hidden");
		let clicker = evt.target;

		if (clicker) {
			let clicker_rect = clicker.getBoundingClientRect();
			let top = clicker_rect.top - 300;
			let left = clicker_rect.left;
			$$invalidate(25, colorizer_top = `${top}px`);
			$$invalidate(26, colorizer_left = `${left}px`);
		}
	}

	let ruler_left = 0;
	let ruler_top = 0;

	function scroll_rulers(evt) {
		let target = evt.target;
		let top_s_y = target.scrollTop;
		let left_s_x = target.scrollLeft;

		//
		$$invalidate(49, ruler_top = top_s_y);

		$$invalidate(48, ruler_left = left_s_x);
	}

	// ---- ---- ---- ---- ---- ---- ---- ----
	// ---- ---- ---- ---- ---- ---- ---- ----
	let g_visibile_items = {
		"project_manage": false,
		"project_open": false,
		"project_save": false,
		"svg_import": false,
		"svg_export": false,
		"svg_save": false,
		"doc_properties": false,
		"editor_prefs": false
	};

	let g_which_open_modal = "none";

	function handle_modal_close(evt) {
		let result = evt.detail.type;
		$$invalidate(50, g_visibile_items[g_which_open_modal] = false, g_visibile_items);
		g_which_open_modal = "none";
	}

	function toggle_dialog(dialog_title) {
		let [species, cmd] = dialog_title.split('-');

		switch (species) {
			case "project":
				{
					switch (cmd) {
						case "new":
							{
								$$invalidate(50, g_visibile_items.project_manage = true, g_visibile_items);
								g_which_open_modal = "project_manage";
								break;
							}
						case "open":
							{
								$$invalidate(50, g_visibile_items.project_open = true, g_visibile_items);
								g_which_open_modal = "project_open";
								break;
							}
						case "save":
							{
								$$invalidate(50, g_visibile_items.project_save = true, g_visibile_items);
								g_which_open_modal = "project_save";
								break;
							}
						default:
							{
								break;
							}
					}

					break;
				}
			case "svg":
				{
					switch (cmd) {
						case "import":
							{
								$$invalidate(50, g_visibile_items.svg_import = true, g_visibile_items);
								g_which_open_modal = "svg_import";
								break;
							}
						case "export":
							{
								$$invalidate(50, g_visibile_items.svg_export = true, g_visibile_items);
								g_which_open_modal = "svg_export";
								break;
							}
						case "save":
							{
								$$invalidate(50, g_visibile_items.svg_save = true, g_visibile_items);
								g_which_open_modal = "svg_save";
								break;
							}
						default:
							{
								break;
							}
					}

					break;
				}
			case "doc":
				{
					// "doc-properties"
					$$invalidate(50, g_visibile_items.doc_properties = true, g_visibile_items);

					g_which_open_modal = "doc_properties";
					break;
				}
			case "editor":
				{
					// "editor-prefs"
					$$invalidate(50, g_visibile_items.editor_prefs = true, g_visibile_items);

					g_which_open_modal = "editor_prefs";
					break;
				}
			default:
				{
					break;
				}
		}
	}

	function toggle_grid(evt) {
		$$invalidate(65, g_show_grid = !g_show_grid);
	} /*
if ( g_show_grid && g_canvas_element ) {
	draw_grid_on_canvas(g_canvas_element,calc_magnification)	
} else if ( g_canvas_element ) {
	clear_grid_from_canvas(g_canvas_element,calc_magnification)	
}
*/

	const click_handler = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'select');
		set_selection_mode('select');
	};

	const click_handler_1 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'pencil');
		set_selection_mode('pencil');
	};

	const click_handler_2 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'pen');
		set_selection_mode('pen');
	};

	const click_handler_3 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'path');
		set_selection_mode('path');
	};

	const click_handler_4 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'rect');
		set_selection_mode('rect');
	};

	const click_handler_5 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'ellipse');
		set_selection_mode('ellipse');
	};

	const click_handler_6 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'polygon');
		set_selection_mode('polygon');
	};

	const click_handler_7 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'star');
		set_selection_mode('star');
	};

	const click_handler_8 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'text');
		set_selection_mode('text');
	};

	const click_handler_9 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'load');
		set_selection_mode('load');
	};

	const click_handler_10 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'connector');
		set_selection_mode('connector');
	};

	function input0_input_handler() {
		id_selected = this.value;
		$$invalidate(23, id_selected);
	}

	function input1_input_handler() {
		class_selected = this.value;
		$$invalidate(24, class_selected);
	}

	function input_input_handler() {
		object_rotate = to_number(this.value);
		$$invalidate(43, object_rotate);
	}

	function input_input_handler_1() {
		object_x = to_number(this.value);
		$$invalidate(27, object_x);
	}

	function input_input_handler_2() {
		object_y = to_number(this.value);
		$$invalidate(28, object_y);
	}

	function input_input_handler_3() {
		object_width = to_number(this.value);
		$$invalidate(29, object_width);
	}

	function input_input_handler_4() {
		object_height = to_number(this.value);
		$$invalidate(30, object_height);
	}

	function input_input_handler_5() {
		object_x1 = to_number(this.value);
		$$invalidate(31, object_x1);
	}

	function input_input_handler_6() {
		object_y1 = to_number(this.value);
		$$invalidate(32, object_y1);
	}

	function input_input_handler_7() {
		object_x2 = to_number(this.value);
		$$invalidate(33, object_x2);
	}

	function input_input_handler_8() {
		object_y2 = to_number(this.value);
		$$invalidate(34, object_y2);
	}

	function input_input_handler_9() {
		object_cx = to_number(this.value);
		$$invalidate(35, object_cx);
	}

	function input_input_handler_10() {
		object_cy = to_number(this.value);
		$$invalidate(36, object_cy);
	}

	function input_input_handler_11() {
		object_rx = to_number(this.value);
		$$invalidate(37, object_rx);
	}

	function input_input_handler_12() {
		object_ry = to_number(this.value);
		$$invalidate(38, object_ry);
	}

	function select_change_handler() {
		grouping_reference = select_value(this);
		$$invalidate(20, grouping_reference);
		$$invalidate(54, grouping_references);
	}

	function input_input_handler_13() {
		object_corner = to_number(this.value);
		$$invalidate(44, object_corner);
	}

	function select_change_handler_1() {
		object_text_font = select_value(this);
		$$invalidate(45, object_text_font);
		$$invalidate(57, object_text_fonts);
	}

	function select_change_handler_2() {
		path_segment_style = select_value(this);
		$$invalidate(21, path_segment_style);
		$$invalidate(55, path_segment_styles);
	}

	function input_input_handler_14() {
		object_points = to_number(this.value);
		$$invalidate(39, object_points);
	}

	function input_input_handler_15() {
		object_sides = to_number(this.value);
		$$invalidate(40, object_sides);
	}

	function input_input_handler_16() {
		object_pointiness = to_number(this.value);
		$$invalidate(41, object_pointiness);
	}

	function input_input_handler_17() {
		object_radial_shift = to_number(this.value);
		$$invalidate(42, object_radial_shift);
	}

	const click_handler_11 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'zoom');
		set_selection_mode('zoom');
	};

	function select_change_handler_3() {
		magnification = select_value(this);
		$$invalidate(13, magnification);
		$$invalidate(52, magnifications);
	}

	const click_handler_12 = evt => {
		$$invalidate(22, g_selector = mode_toggle === 'eye_dropper');
		set_selection_mode('eye_dropper');
	};

	function input_input_handler_18() {
		guass_blur_level = to_number(this.value);
		$$invalidate(46, guass_blur_level);
	}

	function canvas_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			g_canvas_element = $$value;
			$$invalidate(8, g_canvas_element);
		});
	}

	function div29_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			g_canvas_container = $$value;
			$$invalidate(9, g_canvas_container);
		});
	}

	function div30_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			g_canvas_system = $$value;
			$$invalidate(10, g_canvas_system);
		});
	}

	const click_handler_13 = () => {
		toggle_dialog("project-new");
	};

	const click_handler_14 = () => {
		toggle_dialog("project-save");
	};

	const click_handler_15 = () => {
		toggle_dialog("project-open");
	};

	const click_handler_16 = () => {
		toggle_dialog("svg-import");
	};

	const click_handler_17 = () => {
		toggle_dialog("svg-export");
	};

	const click_handler_18 = () => {
		toggle_dialog("svg-save");
	};

	const click_handler_19 = () => {
		toggle_float("library-view");
	};

	const click_handler_20 = () => {
		toggle_dialog("doc-properties");
	};

	const click_handler_21 = () => {
		toggle_dialog("editor-prefs");
	};

	const click_handler_22 = () => {
		toggle_float("svg-edit");
	};

	const click_handler_23 = () => {
		toggle_float("layers-manager");
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*g_calc_doc_width, g_calc_doc_height, g_doc_left, g_doc_top*/ 15 | $$self.$$.dirty[2] & /*g_show_grid, calc_magnification, g_current_tool*/ 56) {
			$: $$invalidate(17, edit_props = {
				width: g_calc_doc_width,
				height: g_calc_doc_height,
				doc_width: g_calc_doc_width,
				doc_height: g_calc_doc_height,
				doc_left: g_doc_left,
				doc_top: g_doc_top,
				drawing_name: "Untitled-1",
				grid_on: g_show_grid,
				magnification: calc_magnification,
				ruler_interval: INTERVAL_ruler,
				tool: g_current_tool
			});
		}

		if ($$self.$$.dirty[0] & /*mode_toggle*/ 16) {
			$: $$invalidate(22, g_selector = mode_toggle !== 'select');
		}
	};

	return [
		g_doc_left,
		g_doc_top,
		g_calc_doc_width,
		g_calc_doc_height,
		mode_toggle,
		project_selected,
		g_db_store,
		g_exportable,
		g_canvas_element,
		g_canvas_container,
		g_canvas_system,
		g_calc_container_width,
		g_calc_container_height,
		magnification,
		ruler_magnification,
		h_zero_tick,
		v_zero_tick,
		edit_props,
		selection_mode,
		tool_cursor,
		grouping_reference,
		path_segment_style,
		g_selector,
		id_selected,
		class_selected,
		colorizer_top,
		colorizer_left,
		object_x,
		object_y,
		object_width,
		object_height,
		object_x1,
		object_y1,
		object_x2,
		object_y2,
		object_cx,
		object_cy,
		object_rx,
		object_ry,
		object_points,
		object_sides,
		object_pointiness,
		object_radial_shift,
		object_rotate,
		object_corner,
		object_text_font,
		guass_blur_level,
		is_viz,
		ruler_left,
		ruler_top,
		g_visibile_items,
		all_window_scales,
		magnifications,
		set_magnification,
		grouping_references,
		path_segment_styles,
		set_selection_mode,
		object_text_fonts,
		selection_mode_var,
		blurry_changed,
		show_picker,
		scroll_rulers,
		handle_modal_close,
		toggle_dialog,
		toggle_grid,
		g_show_grid,
		calc_magnification,
		g_current_tool,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8,
		click_handler_9,
		click_handler_10,
		input0_input_handler,
		input1_input_handler,
		input_input_handler,
		input_input_handler_1,
		input_input_handler_2,
		input_input_handler_3,
		input_input_handler_4,
		input_input_handler_5,
		input_input_handler_6,
		input_input_handler_7,
		input_input_handler_8,
		input_input_handler_9,
		input_input_handler_10,
		input_input_handler_11,
		input_input_handler_12,
		select_change_handler,
		input_input_handler_13,
		select_change_handler_1,
		select_change_handler_2,
		input_input_handler_14,
		input_input_handler_15,
		input_input_handler_16,
		input_input_handler_17,
		click_handler_11,
		select_change_handler_3,
		click_handler_12,
		input_input_handler_18,
		canvas_binding,
		div29_binding,
		div30_binding,
		click_handler_13,
		click_handler_14,
		click_handler_15,
		click_handler_16,
		click_handler_17,
		click_handler_18,
		click_handler_19,
		click_handler_20,
		click_handler_21,
		click_handler_22,
		click_handler_23
	];
}

class MyTester extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css, [-1, -1, -1, -1, -1, -1]);
	}
}

export default MyTester;
